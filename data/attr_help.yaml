---
:race_attrs:
  accu:
    :shortdesc: accumulate stat total
    :attr_type: :race_attrs
    :attr_id: accu
    :syntax: accu:"name"=stat{-base=value}{-expr=(expr)}{#mode}{#legal}
    :longdesc: |-
      Accumulate the value of the specified stat for the entire roster, generating a single total for all regiments in the roster. An initial base value can be specified, in which case the total starts at this value and accrues from there. The total is given the specified name and is included in the notes at the end of the roster printout. Within Army Builder, all totals are displayed in the composition report dialog and included in the accumulated stat display region immediately above the Options Panel.

      It is also possible to specify an arithmetic expression that can be used to generate the accumulated value. If the "-expr" qualifier is specified, an expression is given within parentheses. First, the indicated stat value is accumulated for the entire roster, and then the expression is used to convert the accumulated value into the value to be displayed. To reference the accumulated value in the expression, simply reference the same stat that is being accumulated. Referencing any other stat value will generate an error. If the model count is referenced, the total number of models in the roster is used. If the item count is referenced, the total number of items in the roster is used.

      A maximum of five accumulation attributes will be processed for a given roster. If there are more than one specified, the user can cycle through them by clicking in the accumulated stat display region within Army Builder. If you use this attribute on a stat which is also accumulated by leader units, the non-accumulated value for the leader's stat will be used for the global accumulation.

      [Multiple] [Global]

      Note: It IS possible to specify BOTH a base value and an expression. If done, then the base value is accumulated into the value that is fed into the calculated expression.

      Example: In DBM, the element equivalents need to be accumulated and then divided by three (accu:eqv-expr=(eqv/3)).
  acst:
    :shortdesc: ally cost multiplier
    :attr_type: :race_attrs
    :attr_id: acst
    :syntax: acst:value{@race}{-exempt=expr}{#mode}{#legal}
    :longdesc: |-
      The cost of all allied units that are added to the roster is multiplied by the specified value. Optionally, a race prefix may be specified, in which case the multiplier is only applicable to units from the indicated race.

      Sometimes, there will be a small number of units that you wish to make exempt from the general ally cost multiplier. To handle, you can use the "-exempt" qualifier to specify a boolean type expression (similar to the one used by "utyp"). If a unit matches the type expression, then it is considered exempt from the "acst" multipliers and recruited at standard cost (unless there is another "acst" attribute that the unit is not exempt from).

      [Multiple] [Global] [ABLite]

      Example: When creating a roster for Race X, units can be selected from other races, but at 20% higher cost than normal (acst:1.2).

      Example: When building armies for Race A, allied units selected from Race B cost 25% extra (acst:1.3@bb).

      Example: Units of other races cost an extra 10%, except for units of type 'Foo' or 'Bar' (acst:1.1-exempt=Foo|Bar)
  ally:
    :shortdesc: add an allied race
    :attr_type: :race_attrs
    :attr_id: ally
    :syntax: ally:race{#mode}{#legal}
    :longdesc: |-
      Add an additional race, given by its abbreviation, to the list of allies for the current race. Typically, allies will be listed in the proper field of the race record. However, when new races are introduced in supplemental data files, this attribute allows existing races to be augmented to include the new races as allies.

      [Multiple] [ABLite]
  crcr:
    :shortdesc: line break control
    :attr_type: :race_attrs
    :attr_id: crcr
    :syntax: crcr
    :longdesc: Obsolete - Do not use.
  dfaq:
    :shortdesc: user FAQ entry
    :attr_type: :race_attrs
    :attr_id: dfaq
    :syntax: dfaq:priority-"title"-"description"
    :longdesc: |-
      This attribute is used to designate FAQ entries for inclusion in the FAQ that Army Builder will generate for each game system. You can specify up to 200 of these entries, and Army Builder will properly synthesize an HTML page containing all of the FAQ entries. Each FAQ entry consists of a priority (0 is highest), a title, and description text. The FAQ entries are sorted by priority, with a table of contents at the top of the HTML page that lists all of the title for the user, along with links directly to the topic description. Each entry is then listed with the specified title and has the given description text as its contents.

      FAQ entries are attached via a race attribute, yet they apply to the entire set of loaded data files. This attribute MUST be attached to the FIRST race (alphabetically by prefix) within the data files, else it is ignored. The simplest way to ensure this is to just define the attribute as a global race augmentation, which guarantees that the notes will always be attached to the first race in the list.

      You are encouraged to specify multiple FAQ entries via this attribute, since the more detailed the FAQ is, the fewer questions that everyone will have about how to use them. This mechanism provides a convenient way to provide documentation about the data files to users, without having to worry about attached readme files that are non-obvious and therefore rarely read.

      [Multiple] [Global] [ABLite]
  dvrs:
    :shortdesc: racial diversity needed
    :attr_type: :race_attrs
    :attr_id: dvrs
    :syntax: dvrs:minimum{-msg=msg}
    :longdesc: |-
      This attribute requires racial diversity within the roster. Units from at least minimum number of distinct races must exist within the roster. Units that are native to the current race will count as 1 race slot for the purposes of this attribute.

      [Validation] [Single]

      Note: At present, the maximum supported value for minimum is 5.

      Example: Race X is a special amalgam race that draws upon the units from 2 or more different races for any given battle (dvrs:2).
  gmap:
    :shortdesc: map a composition group
    :attr_type: :race_attrs
    :attr_id: gmap
    :syntax: gmap:group=name-abbrev
    :longdesc: |-
      The composition group, specified by its defined abbreviation, is mapped to a different name and abbreviation when used with the current race. Both of the string values must conform to the length restrictions for the corresponding components, as defined for definition files elsewhere in this document. This attribute is useful when a new race requires a custom composition group and the data file creator does not want to require the definition file to be modified. Instead, the group is effectively renamed for this race. When this attribute is used, all composition group references within the data file must be made to the basic group that is being mapped. The actual mapping only occurs within output for the user's benefit.

      [Multiple] [ABLite]

      Example: A new race is being created, and it has a special composition group named "Avatar", which is abbreviated as "Avat" (gmap:Mach=Avatar-Avat).
  gmul:
    :shortdesc: composition multipliers
    :attr_type: :race_attrs
    :attr_id: gmul
    :syntax: gmul
    :longdesc: |-
      This attribute designates the race as having composition breakdown rules that can be multiplied. If the composition results for the roster are not compliant with the rules, then the results are tried at a small number of multipliers. If any multiplier results in a valid roster, the validation results will indicate that the roster is valid and will specify the multiplier that achieved validity.

      [Validation] [Single] [Global]

      Note: Since Army Builder cannot know whether multipliers are intended to be used or not by the user, each composition group which does not satisfy the base requirements is flagged as invalid. If a multiplier produces a valid roster, then an additional message is included that identifies the valid multiplier.
  hide:
    :shortdesc: race not selectable
    :attr_type: :race_attrs
    :attr_id: hide
    :syntax: hide{:}{#race}{#mode}{#legal}
    :longdesc: |-
      The race is hidden from the user within Army Builder. The race is not available for selection from the list of races, nor is it treated as shared. The primary use of this attribute is for a race that is used solely for inheritance via the "inhr" attribute.

      [Single] [ABLite]
  ilmt:
    :shortdesc: limit special items
    :attr_type: :race_attrs
    :attr_id: ilmt
    :syntax: ilmt:[pct|points|count|indiv]=value{-categ=categ}{-msg=msg}{#mode}{#legal}
    :longdesc: |-
      The special items which can be allocated for this race are restricted to a fixed limit. The nature of the limit is expressed as a percentage of the total roster points (pct), an explicit point total (points), a total number of items (count), or an individual item limit (indiv). The limit imposed is given by 'value'. In the case of an individual item limit, no item in the roster may cost more than the specified value. Optionally, the restriction can be constrained to items that belong to the specified item categ (given by its abbreviation).

      [Validation] [Multiple] [Global]

      Example: Armies of the race may possess special items totaling no more than 10% of the total army cost (e.g. ilmt:pct=10).
  info:
    :shortdesc: roster design message
    :attr_type: :race_attrs
    :attr_id: info
    :syntax: info:[display|print|always]="message"{#mode}{#legal}
    :longdesc: |-
      This attribute specifies a block of message text that provides extra information to the user for the race. This message can be displayed to the user whenever an army of this race is created or loaded (display), included in the army notes generated during roster printout (print), or in both places (always). If specified for display, the information text can also be viewed by the user at run-time via the "Roster" menu.

      [Multiple] [ABLite]
  inhr:
    :shortdesc: inherit attributes
    :attr_type: :race_attrs
    :attr_id: inhr
    :syntax: inhr:race
    :longdesc: |-
      Inherit all attributes defined for the specified race, treating them all as if specified explicitly for this race.

      [Multiple] [ABLite]
  ipts:
    :shortdesc: special item points limit
    :attr_type: :race_attrs
    :attr_id: ipts
    :syntax: ipts:{total=total}{-}{each=each}{#mode}{#legal}
    :longdesc: |-
      This attribute restricts the points that can be spent on special items for all units of the race. The restriction can take one of two forms. To limit the total number of points spent on items, use the "total=" qualifier, in which case units will be unable to add items that would exceed this total. To limit units to only have access to items up to a maximum cost, use the "each=" qualifier, and no items will be displayed that exceed the specified cost each. It is also valid to specify both of these qualifiers, in which case a separating '-' must be included before the "each=" qualifier. However, it is illegal to specify neither qualifier. If multiple restrictions are encountered, the most restrictive values are always used.

      [Multiple] [Global]

      Example: By default, no unit in the army can take items worth more than 50 points each and cannot take more than 100 total points of items (ipts:total=100-each=50).
  ireq:
    :shortdesc: special item requirements
    :attr_type: :race_attrs
    :attr_id: ireq
    :syntax: ireq:[item|categ]=name-points=value@[min|max]{-msg=msg}{#mode}{#legal}{#istype}
    :longdesc: |-
      The inclusion of specific items within the roster must satisfy special requirements when this attribute is used. The restriction can apply to a specific item, in which case it is given by its unique id, or to a category of items, in which case the category abbreviation must be provided. In order for the item(s) to be valid, the army roster must satisfy either a minimum or maximum point size, given by value.

      [Validation] [Multiple] [Global]

      Example: Inclusion of item 'xyz' in the roster requires an army of at least 2000 points (ireq:item=xyz-points=2000@min).
  lnch:
    :shortdesc: design notes when loaded
    :attr_type: :race_attrs
    :attr_id: lnch
    :syntax: lnch:{wide-}"message"
    :longdesc: |-
      Data file authors often need a means of informing users about important facets of the data files, and the use of launch notes offers a solution. This attribute defines a message that will always be displayed to the user whenever the current data files are first launched within Army Builder (i.e. loaded). This attribute works much like the "info" attribute, except the notes are not specific to a particular race. Instead, the notes apply to the entire set of data files, and they are displayed BEFORE the "Create New Roster" dialog is displayed to the user.

      For it to be recognized properly, this attribute must be attached to the FIRST race (alphabetically by prefix) within the data files. The simplest way to ensure this is to just define the attribute as a global race augmentation, which guarantees that the notes will always be attached to the first race in the list.

      [Multiple] [Global] [ABLite]

      Note: It is perfectly valid to specify multiple launch notes via this attribute, in which case all of the messages are appended together, with a blank line between them. Each attribute can specify whether the launch notes should appear in a narrow (default) or wide message box. If even one "lnch" attribute specifies wide, then a wide box is used.
  mode:
    :shortdesc: define special scenario
    :attr_type: :race_attrs
    :attr_id: mode
    :syntax: mode:abbrev="name"{-time=x:y}{-rules="rules"}
    :longdesc: |-
      The specified mode is defined to exist for the race, with the indicated abbreviation and name. The name is provided within double quotes to allow for embedded spaces (a maximum of 25 characters are retained by Army Builder, with any excess being discarded). Whenever an army is being created and the current race is the primary race, this mode will be included by name on the army creation dialog for the user to select. Once a mode has been defined, units and options can be conditionally enabled based on whether the mode is enabled (via the "lglx" attribute), referencing this mode via its abbreviation.

      You may optionally specify a rule-set to be automatically selected as the default rule-set whenever this mode is selected by the user (although the user is still free to change the rule-set at any time). This is accomplished via the "-rules" qualifier, which must designate the name of the rules within double-quotes. It is also possible to specify a time period that is represented by this mode. Army Builder understands about a global timeline that spans from -999999 to 999999. Typically, this timeline is used to represent dates (years) for historical game systems. The time range specified must take the form "x:y", where both values are signed integers and x must be less than or equal to y. This mechanism allows modes to be defined that represented specific time periods in history, and units/options/etc. can be constrained to be legal only for specified time periods via use of the "lglx" attribute. If no time constraint is specified for a mode, the mode is assumed to cover ALL time periods.

      [Multiple] [Global] [ABLite]

      Example: A mode can be defined that enforces a set of tournament rules during army construction (mode:tournie="Tournament Rules").

      Example: A mode is needed that covers the years 1476 to 1489 AD (mode:middle="1476 - 1489"-time=1476:1489).
  need:
    :shortdesc: unit is required
    :attr_type: :race_attrs
    :attr_id: need
    :syntax: need:[unit|categ|type]=value1@count[m|u]{-item=item}{-msg=msg}{#mode}{#legal}{#istype}
    :longdesc: |-
      The race requires that count number of units (u) or models (m) be included in the roster that possess the unique id, unit category, or type specified by value1. If no value for count is given, 1 unit is assumed. Optionally, the unit can be required only if a specific item is included in the army, given by its unique id. If an item is specified, the count indicates the number of units required for EACH instance of the item. To enable only 1 unit to satisfy the requirement for any number of items, the count should be specified as 0.

      [Validation] [Multiple] [Global]

      Example: The race requires at least one model that can lead the army (need:categ=general@1m).

      Example: In order to take any number of the item HHG in the army, at least 1 unit of type Which must be included in the army (need:type=Witch@0u-item=HHG).
  none:
    :shortdesc: default scenario name
    :attr_type: :race_attrs
    :attr_id: none
    :syntax: none:"name"
    :longdesc: |-
      The specified name is used as the public name for the default mode/scenario for the race.

      [Single] [ABLite]
  olmt:
    :shortdesc: option is restricted
    :attr_type: :race_attrs
    :attr_id: olmt
    :syntax: olmt:[unit|type]=name-option=count[u|m]{@size[p|m]}-[min|max]{-msg=msg}{#mode}{#legal}{#istype}
    :longdesc: |-
      This attribute constrains the number of units or models which may possess the named option. The units are identified as either a specific unit (given by unique id) or a unit type which matches the given name. If a type match is specified and the type name is given as "?", all units in the roster are included in the validation. The restriction is that a total of count units (u) or models (m) can possess the option for every size increment of the army. If the size is omitted, count is a flat limit for the army. If a size is specified, the nature of the size can be designated as either a point cost (p) for the army (e.g. 1 option per 1000 points) or a total number of models (m) in the army (e.g. 1 option per 25 total models). In the latter case, only non-auxiliary models are included in the count (i.e. all models not starting with an 'x'). The limit can be either a minimum or a maximum.

      [Validation] [Multiple] [Global]

      Note: If the specified option is range-based (i.e. uses the "rang" attribute) and the limit is model-based, the current selection count is used for the option instead of the actual model count of the unit. This allows a unit of many models to have fewer instances of the option selected for it, with "olmt" handling it properly.

      Example: Any cavalry unit can carry the standard for the army, but there can be only one such standard in the army (olmt:type=cavalry-standard=1u-max).

      Example: The entire army may contain a maximum of 1 standard for every 25 models in the army (olmt:type=?-standard=1u@25m-max).

      Example: At least two scout models in the army must be assigned a weapon (olmt:unit=xscout-weapon=2m-min).
  pnam:
    :shortdesc: printed name of race
    :attr_type: :race_attrs
    :attr_id: pnam
    :syntax: pnam:"name"{#mode}{#legal}
    :longdesc: |-
      The names of some races can be longer than will fit in the region allocated on printed rosters. When this occurs, an alternate name can be specified with this attribute, and this name will be used in roster output instead.

      [Single] [ABLite]
  prim:
    :shortdesc: name primary rule-set
    :attr_type: :race_attrs
    :attr_id: prim
    :syntax: prim:"name"
    :longdesc: |-
      The specified name is displayed for the primary composition breakdown rule-set, instead of the default name of "Primary".

      [Single] [Global] [ABLite]
  scmp:
    :shortdesc: compare stat values
    :attr_type: :race_attrs
    :attr_id: scmp
    :syntax: scmp:expr1[>|>=|=|<=|<]expr2{-msg=msg}{#when}{#mode}{#legal}{#istype}
    :longdesc: |-
      This attribute will verify that two arithmetic expressions satisfy a comparison relationship with each another. Each expression can use up to 4 terms, with each term being a literal value, a stat abbreviation, '#' for the model count, or '%' for the item count. The value used for stats is the current adjusted value.

      [Validation] [Multiple] [Global]

      Example: All units must maintain a relationship where the Str and Spd stats never exceed a total of 14 (e.g. scmp:str+spd<=14).
  sglb:
    :shortdesc: min/max stat in roster
    :attr_type: :race_attrs
    :attr_id: sglb
    :syntax: sglb:stat-[min|max]-type=name{-msg=msg}
    :longdesc: |-
      This attribute performs a global test on the specified stat of all top-level regiments.The entire roster is scanned to determine the minimum or maximum value for the stat throughout the roster. Each unit that possesses the specified type name is required to have either the highest or lowest value for that stat. It is perfectly valid for other units to have the same stat value, as long as the matching units contain the highest/lowest. If any of the matching units do not meet the criteria, a validation error is triggered.

      [Validation] [Multiple] [Global]
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :race_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  smap:
    :shortdesc: map stats to text values
    :attr_type: :race_attrs
    :attr_id: smap
    :syntax: smap:stat-map:x1{-y1}=z1{,x2{-y2}=z2}...
    :longdesc: |-
      This attribute will map a numeric stat value to a set of corresponding text values. The resulting output of the stat is the mapped text instead of the numeric value. A mapping table is specified for the stat, consisting of a set of value ranges and the corresponding mapping value for that range. If the final adjusted stat value falls within one of the ranges given, the mapping text is used as a wholesale replacement for the stat value (i.e. NEITHER the base NOR adjusted stat value is displayed - only the mapping text). If none of the provided ranges apply, then the stat value is displayed normally (i.e. as if no "smap" attribute existed). If you specify a global "smap" attribute for a stat AND specify a race-specific "smap" attribute for the same stat (NOT via an augmentation), then the race-specific "smap" will take precedence. This mechanism is extremely useful for games where a stat must be one of a pre-defined set of text values, since the data files can manipulate numeric values and let the final value be mapped for display.

      [Multiple] [Global] [ABLite]

      Note: A maximum of 25 mapping entries can be specified for an "smap" attribute.

      Example: A sample mapping attribute might look like "smap:st-map:0="Weak",3.1-4.9="Fourish""
  tlmt:
    :shortdesc: unit type is restricted
    :attr_type: :race_attrs
    :attr_id: tlmt
    :syntax: tlmt:name-[pct|model|unit]=limit{[+|-]points/interval@start}@[min|max]{-free=count}{-thresh=size}{-msg=msg}{#mode}{#legal}{#istype}
    :longdesc: |-
      When this attribute is specified, the total number of units that possess the specified type name are restricted within the army. The limitation is expressed as either a percentage (pct), model count, or unit count. The value allowed is given by limit. Either a minimum or maximum requirement must be specified.

      The limit imposed can also include an interval, using the same basic syntax as is used by composition groups. Immediately following the base limit value, an interval can be specified of the form "+X/Y@Z". In this form, X is the adjustment, Y is the roster point size interval, and Z is the size at which to begin applying the interval. Optionally, the adjustment can be subtracted as well by using a '-' instead of the '+'. The interval syntax is not support for percentage-based validation, so it is ignored in that situation.

      Optionally, a minimum size threshold can be stipulated, in which case the rule only applies when the threshold is exceeded. The granularity of this threshold value is the same that the attribute is based upon (percent, model, or unit). It is also possible to specify a number of "free" models or units for this attribute. These models are not counted towards the maximum limit imposed. This form is similar to the "-thresh=" qualifier, except that the limit is based on the NET count (after subtracting the free count), instead of the total count.

      [Validation] [Multiple] [Global]

      Note: This attribute considers all children of a unit to be of the same type as the top-level unit. Consequently, child units which differ in type from the top-level unit will not be handled properly. Even if the "forc" attribute is used on child units, those units will be counted with the parent unit incorrectly.

      Example: No more than 33% of the total points in the army can possess missile weapons (tlmt:missile-pct=33@max).

      Example: A minimum of 6 models of type grunts must exist in the army, but only if 3 or more models are added to the army (tlmt:grunts-model=6@min-thresh=3).
  trat:
    :shortdesc: ratio between unit types
    :attr_type: :race_attrs
    :attr_id: trat
    :syntax: trat:{!}name1@x[m|u|p]:{!}name2@y[m|u|p]{-flat}{-free=f1:f2}{-msg=msg}{#mode}{#legal}{#istype}
    :longdesc: |-
      This attribute establishes a relationship between units of two different types, where the types are given as name1 and name2. A minimum ratio must exist between the two types, where at least x of type1 must exist in the roster for every y of type2. If the ratio between the two types must be exact, then two separate relationships must be defined - one in either direction. It is possible to compare the total number of models of each type, the number of units of each type, or the total points allocated to each type. This is dictated by either an m or u or p being appended to each of the counts. The relationship assumes that all instances of each type are counted towards the ratio.

      In some cases, it may be necessary to compare the number of units that are NOT of a particular type, and this can be specified by prefixing the type name with a '!' character. It is not valid to use the '!' syntax for both type names at the same time. To specify a flat requirement, wherein x instances of type1 are sufficient for any number of instances of type2, use the "-flat" qualifier (and the "-free" qualifier will be ignored). If one or more instances of either type are "free" and not counted towards the ratio, then the "-free" modifier can be specified, indicating the number of free instances allowed for both types, f1 and f2. If a value of 0 is given for x, then the presence of any units of type2 will be considered invalid (i.e. this allows you to specify that troops of type1 cannot exist with troops of type2). In this case, the "-free" qualifier is ignored for the f1 value.

      [Validation] [Multiple] [Global]

      Note: If a unit matches BOTH of the specified types, then it is counted towards the totals for BOTH criteria.

      Example: For every unit of type Foo that appears in the roster, at least 2 units of type Bar must also exist (trat:Bar@2u:Foo@1u).

      Example: Exactly one model of type Foo must exist in the roster for every model of type Bar within the roster (trat:Bar@1m:Foo@1m and trat:Foo@1m:Bar@1m).

      Example: If a unit of type Foo exists in the roster, then no units of type Bar may be present (trat:Bar@0u:Foo@1u).

      Example: In order to take any number of units of type Foo, the roster must contain at least 2 units of type Bar (trat:Bar@2u:Foo@1u-flat).

      Example: For every unit of type Foo in the roster, there must be at least 2 units that are not of type Bar (trat:!Bar@2u:Foo@1u).
  uldr:
    :shortdesc: leader/follower limits
    :attr_type: :race_attrs
    :attr_id: uldr
    :syntax: uldr:type-[type|comp|categ]=name-[min|max]@value[m|u|p]{-msg=msg}
    :longdesc: |-
      This attribute is provides more detailed constraint control over the relationship between leaders and followers. All leaders with the specified type must maintain a given relationship with their individual sets of followers. Only the followers matching the secondary criteria (type, composition group, or unit category) are included in the constraint relationship. The relationship must either match a minimum or maximum, being compared against a value of models, units, or points.

      [Validation] [Multiple] [Global]

      Example: The attribute "uldr:Fred-categ=trps-min@2u" indicates that all leaders of type 'Fred' must have a minimum of 2 unit of category 'Troops' assigned to them, else the validation error is triggered.
  ulmt:
    :shortdesc: unit is restricted
    :attr_type: :race_attrs
    :attr_id: ulmt
    :syntax: ulmt:[type|comp|categ|base]=name-[min|max]@[points|unit|model]=value{-thresh=size}{-msg=msg}{#mode}{#legal}{#istype}
    :longdesc: |-
      Within an army, the units which match the specified characteristics cannot exceed an upper or lower limit. The units are identified by type, composition group, category or base category, where the "base" category is the primary category assigned to the unit only (no others are included). Whichever classification is used, the name indicates the match criteria. If a composition group or category is specified, name must be the proper abbreviation. If a composition group is used, then multiple composition groups can be given in a comma-separated list. If this is done, a unit that belongs to any one of the composition groups listed is counted into the total. The maximum or minimum form is then specified, with units being restricted based on their point cost, unit count, or model count. The imposed limit is given by value. Optionally, a minimum size threshold can be stipulated, in which case the rule only applies when the threshold is exceeded. The granularity of this threshold value is the same that the attribute is based upon (points, model, or unit).

      [Validation] [Multiple] [Global]

      Warning: Be sure to use the "umax" and/or "umin" attributes if a specific unit is restricted - this attribute is intended only for groups of related units.

      Example: Races are usually restricted to only one supreme leader (ulmt:categ=general-max@model=1).

      Example: Only 200 points of war machine can be added to an army (ulmt:comp=mach-max@points=200).

      Example: Only 3 models of heroes and lords are allowed (ulmt:comp=hero,lord-max@model=3).
  umul:
    :shortdesc: unit cost multiplier
    :attr_type: :race_attrs
    :attr_id: umul
    :syntax: umul:type=name*x{#mode}{#legal}
    :longdesc: |-
      All units with the specified type name assigned to them will have their total cost multiplied by the indicated value x. The cost that is multiplied is the cost of the unit and all children that are not assigned to other composition groups (i.e. magnetized children are included in the multiplied cost). This attribute is ignored for units which are magnetized children, as they are factored into their parent only.

      [Multiple] [Global] [ABLite]

      Note: Unlike other attributes, wildcards are not allowed on type names for "umul".

      Example: All units of type "flier" have their cost doubled (umul:type=flier*2).
  xbrk:
    :shortdesc: extra composition rule
    :attr_type: :race_attrs
    :attr_id: xbrk
    :syntax: xbrk:"name"="ruleset"{#mode}{#legal}
    :longdesc: |-
      The race with this attribute can be created with a choice of composition breakdown rules. The specified ruleset must possess the proper syntax for a normal composition breakdown for the race, just like the primary breakdown that is part of the race definition. If a race has more than one set of composition rules defined for it, then the primary ruleset is used as the default and the user can select one of the alternate rule sets if desired (via a menu within Army Builder). When displayed to the user, this rule set is shown with the given name, which cannot be longer than 25 characters.

      [Multiple] [Global] [ABLite]

      Example: Games are typically fought using one set of composition breakdown rules. However, there is a special "Defender" scenario where the composition is restricted to only 1 leader, 5 units of infantry, and 3 units of machines (xbrk:"Defender"="Lead:mmax=1,Inf:umax=5,Mach:umax=3").
  xmlx:
    :shortdesc: custom output extension
    :attr_type: :race_attrs
    :attr_id: xmlx
    :syntax: xmlx:"menu text"-"executable"{-"extra params"}{-quotes}
    :longdesc: |-
      This attribute enables custom output extensions to be integrated directly into Army Builder.Custom extensions use the standard XML export file created by the product as their input and generate custom formatted output, such as graphical roster sheets. Full details on custom extensions are provided in the Construction Kit Manual, so please refer there for more information.

      The attribute specifies both the menu item name to be displayed to the user and the name of the executable file to be invoked. In some cases, additional command line parameters need to be passed to the custom extension, and those can also be specified if needed. If the "-quotes" qualifier is specified, the XML filename passed to the extension program is enclosed within double-quotes. The executable file is assumed to reside in the "Data" directory, just like all normal data files. This enables the custom extension to be included into a standard import file without any difficulty. The only requirement is that the name of the executable should reflect the name of the game system in some way so that multiple extensions for different game systems don't use duplicate names (e.g. name the file "b5_print.exe" instead of "print.exe").

      Custom extensions are attached via a race attribute, yet they apply to the entire set of loaded data files. This attribute MUST be attached to the FIRST race (alphabetically by prefix) within the data files, else it is ignored. The simplest way to ensure this is to just define the attribute as a global race augmentation, which guarantees that the custom extension will always be attached to the first race in the list.

      [Multiple] [Global]

      Note: Please see the Construction Kit Manual for complete details on utilizing custom extensions.

      Note: A maximum of 10 custom extensions can be added for a given game system. If more are defined, any excess are simply ignored.

      Example: Let the user invoke the custom extension program "foo.exe" via a menu item named "One Per Page" and pass an extra parameter to the extension to tell it to print one unit per page ("xmlx:"One Per Page"-"foo.exe"-"oneeach")
:ext_unit_attrs:
  clmt:
    :shortdesc: restrict item categories
    :attr_type: :ext_unit_attrs
    :attr_id: clmt
    :syntax: clmt:categ{+categ...}[>|>=|=|<=|<][count|stat]-[points|count|slots]{-msg=msg}{#when}{#race}{#mode}{#legal}{#istype}
    :longdesc: |-
      This attribute establishes a constraint on the special items that may be possessed by this unit from a set of special item categories. The categories are given by their abbreviation, with multiple categories being combined by placing a '+' between them. This is followed by the arithmetic relationship to enforce and the corresponding value to compare against. Optionally, a stat abbreviation can be given instead of a value, in which case the adjusted value of the stat is used as the basis for the comparision. The comparison itself can be based on the raw count of items possessed, the total number of slots used by the possessed items, or the total points of the items possessed. Only the items belonging to the specified set of categories are included in the comparison.

      [Validation] [Multiple]

      Example: Unit A is only allowed to take a maximum of 2 special items from category "spel" (clmt:spel<=2-count).

      Example: Unit B can have up to 50 points of enchanted items, weapons, and armor (clmt:ench+weap+armr<=50-points).
  disc:
    :shortdesc: cost is discounted
    :attr_type: :ext_unit_attrs
    :attr_id: disc
    :syntax: disc:[unit|type]=name*mult-[model|all]
    :longdesc: |-
      The cost of the unit is discounted by the given multiplier mult. The discount is either applied to the entire unit if any regiment in the army meets the criteria ("-all") or to one model in the unit for each regiment in the army which meets the criteria ("-model"). The criteria is the set of units with a unique id or type equal to name. If the "-model" qualifier is used and there are more models in the discounted unit than there are other units meeting the criteria, all excess models are computed with no cost discount. The computed discount value is subtracted from the total cost, so this attribute can be used to increase the cost of a unit, but the multiplier must be specified as a negative value to do so.

      [Validation] [Multiple] [ABLite]

      Note: The discounted price only applies to the cost of a model in the unit (i.e. including individual model options but excluding children, unit-wide options like standards, etc.). Be careful to only specify this attribute once for a given unit, else erratic results will be obtained.

      Example: Models in Unit A are given at a 50% discount for each regiment of Unit B in the army. If more models of Unit A are in the army than there are regiments of Unit B, the excess models of Unit A are charged at full price (disc:unit=unitb*.5-model).

      Example: All models in Unit C cost double if one or more regiments of Unit D exist in the army (disc:unit=unitd*-1-all).
  equl:
    :shortdesc: all units of 'equal' size
    :attr_type: :ext_unit_attrs
    :attr_id: equl
    :syntax: equl:size{-msg=msg}
    :longdesc: |-
      All top-level regiments of this unit must be roughly equal in distribution (i.e. +/-1 model relative to each other). The size given is the minimum number of total models required in the army (across all regiments of this unit) before a split can occur and an additional unit can be taken. The formula used is:
         max # units = ((total models - 1) / size) + 1

      [Validation] [Multiple]

      Example: Unit A requires 6 models before you can have two units, 11 models for 3, etc. (equl:5)
  foll:
    :shortdesc: unit is assigned a leader
    :attr_type: :ext_unit_attrs
    :attr_id: foll
    :syntax: foll:race{-[type|typeopt]=name]}{-must}{-msg=msg}
    :longdesc: |-
      This unit may be assigned a leader from among units that have been assigned the "lead" attribute. The leader must match the race specified (given by the two-letter prefix), which does not have to be the same as the follower unit (but usually will). Alternately, a race of "xx" can be specified, which enables the unit to follow a leader from any race. If "-must" is specified, a leader must be assigned for the unit or validation will fail. Optionally, the valid leaders which are candidates for this unit may be constrained by type, as follows:
         type - only leaders with a type of name may be selected
         typeopt - only leaders with a type of name OR NO TYPE may be selected

      [Single] [Validation] [ABLite]

      Example: The unit must be assigned a leader that belongs to race ZZ and is of the type "Prince" (foll:zz-type=prince-must).
  forc:
    :shortdesc: force validation processing
    :attr_type: :ext_unit_attrs
    :attr_id: forc
    :syntax: forc
    :longdesc: |-
      Specifying this attribute on a unit will ensure that it is always included as part of the validation process, even if the unit is not a top-level regiment. Most validation attributes only include top-level regiments in their processing. This attribute ensures that this unit is always processed along with the top-level regiments. This attribute has no parameters.

      [Validation] [Single]

      Note: If the unit is already included as a top-level regiment, then the unit is not processed twice.

      Warning: If the unit is assigned the "coun" attribute, then it will NOT be added to the validation processing. This is because units with the "coun" attribute are likely to be counted both on their own and as part of their parent regiment, resulting in invalid totals being generated for validation processing.

      Warning: The cost computation for child units used with the "trat" and "tlmt" attributes will not always be 100% accurate when complex child relationships exist for the child (e.g. Unit A is a child and has multiple children itself, so its cost computation may not always be correct for the "trat" and "tlmt" attributes).
  hide:
    :shortdesc: unit not shown by default
    :attr_type: :ext_unit_attrs
    :attr_id: hide
    :syntax: hide{:}{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is hidden from the list of Available Units for its race within Army Builder. It can only be seen through options that make it available for other units. This attribute has no parameters.

      [Single] [ABLite]

      Example: Unit leaders can only be selected as options for the units they accompany. As such, they must not be accessible from the main list of Available Units.
  inhx:
    :shortdesc: inherit attributes
    :attr_type: :ext_unit_attrs
    :attr_id: inhx
    :syntax: inhx:unit
    :longdesc: |-
      Inherit all external unit attributes defined for the specified unit, treating them all as if specified explicitly for this unit.

      [Multiple] [ABLite]
  lcmp:
    :shortdesc: compare stat values
    :attr_type: :ext_unit_attrs
    :attr_id: lcmp
    :syntax: lcmp:expr1[>|>=|=|<=|<]expr2{-msg=msg}{#when}{#mode}{#legal}
    :longdesc: |-
      This attribute will verify that two arithmetic expressions satisfy a comparison relationship with each another. Each expression can use up to 4 terms, with each term being a literal value, a stat abbreviation, '#' for the model count, or '%' for the item count. The value used for stats is the current adjusted value.

      [Validation] [Multiple]

      Example: The unit must maintain a relationship where the Str and Spd stats never exceed a total of 14 (e.g. lcmp:str+spd<=14).
  lead:
    :shortdesc: unit is a leader
    :attr_type: :ext_unit_attrs
    :attr_id: lead
    :syntax: lead:[any|more|less]{@[<|<=|>|>=|=]count{@[<|<=|>|>=|=]count}[m|u]}-group1{,group2{,...}}{-accum@stat1=stat2{(expr)}{,s3=s4{(expr)}{,s5=s6(expr)}}}}{-msg=msg}
    :longdesc: |-
      This unit is designated as a "leader" that has the specified relationship with its followers. This unit can be selected as the "leader" for any follower unit that it satisfies the requirements for. During validation, the total points of this unit must satisfy the specified relationship vis-a-vis the total points for all of its assigned followers. The followers allowed are those belonging to one of the composition groups specified (via abbreviation). The relationship must be one of the following types:
         any - there is no relationship requirement
         more - the leader's points must be greater than or equal to the followers' points
         less - the leader's point must be less than or equal to the followers' points

      All points associated with follower units belonging to the specified composition groups are tallied as follower points - followers belonging to other groups are ignored. If the leader has children, their points are tallied as well. Only points associated with the leader's composition group are considered part of the leader's total cost. This ensures that children of the leader (e.g. a ridden war machine) are tallied as followers automatically unless they belong to the leader's composition group.

      It is also possible to restrict the number of followers that are assigned to the leader. The restriction takes the form of an arithmetic relationship and a count of either units (u) or models (m). If the number of units/models is not compliant with the indicated relationship, a validation error is reported. If necessary, a second comparison relationship can be specified. The second comparison follows the same rules as the first one, but both comparisons must be based on the same metric (units or models), so this is only specified once.

      Within some game systems, it is important that a leader unit track the total of a particular stat that is possessed by all of its followers. For example, in DBM, the total number of "element equivalents" needs to be calculated for a command element. To support this, you can use the "-accum" qualifier and specify the leader stat to accumulate into (stat1) and the follower stat to be accumulated (stat2). It is perfectly valid for stat1 to be the same as stat2, in which case the leader's value for the stat simply represents the total for all of its followers. Up to three accumulated stats can be specified for the leader, with each pair being separated by a comma. The prior value of the stat for the leader is included in the total accumulation.

      In addition to a simple stat, a calculated expression can be given for each accumulated stat of a leader. Immediately after specifying the stat pair to be used, an expression can be given in parentheses. The result of the expression is used as the final result of the accumulation. Within the expression, the leader's stat that is accumulated into can be referenced to access the initial accumulated stat value. Referencing any other stat will generate an error. Both the model count and item count are zero when this expression is evaluated.

      [Single] [Validation] [ABLite]

      Warning: The leader should be a top-level regiment only, except in rare circumstances. If it is not a top-level regiment, then the lump sum total for the entire regiment is used as the leader's value instead of only the points for units belonging to its composition group.

      Warning: Use of the "-accum" qualifier will cause any adjustments to the calculated stat to be ignored. The accumulated stat value is calculated after all other roster updates are processed, and the new value simply overwrites any value that was calculated normally for the leader unit. If automatic roster validation is disabled, then the accumulated stat value will not be updated until the next validation is triggered, as the accumulation is performed as part of the roster validation processing. For this same reason, it is not possible to use an accumulated stat value within a derived stat, as the accumulated value does not exist when the derived stat is calculated.

      Warning: If you use the "-accum" qualifier for a leader that is not a top-level regiment, the accumulation will be ignored. This feature is only available for top-level regiments.

      Example: The unit can be selected as a leader for all follower units that belong to the composition group "rgmt", and the leader's points must be less than all of its followers combined (lead:less-rgmt).

      Example: The unit is a valid leader for all "rgmt" followers, with any point size being allowed, but only a maximum of 12 models being assigned to the leader (lead:any@<=12-rgmt).

      Example: The unit is a valid leader for all "rgmt" followers, with any point size being allowed, and the "CmdEqv" stat for the leader is calculated to contain the total of all "Eqv" stats for its followers (lead:any-rgmt-accum@cmdeqv=eqv).

      Example: The leader must have between 2 and 5 followers assigned to it ("lead:any@>=2<=5u-Othr").

      Example: The leader can have up to 3 followers and accumulates the 'eqv' stat of those followers into 'brk' stat, displaying only half the total (lead:any@<=3-accum@brk=eqv(eqv/3)).
  legl:
    :shortdesc: restrict mode/race access
    :attr_type: :ext_unit_attrs
    :attr_id: legl
    :syntax: legl:{race=name}|{mode[<|=|>|!]name}
    :longdesc: |-
      Obsolete - Please use "lglx" instead.

      When this attribute is attached to a record, the record is only legal when the race with the specified abbreviation is currently the primary race or if the current mode satisfies the constraint specified. Non-legal records are ignored completely by Army Builder.

      [Multiple] [ABLite]

      Note: If a record has even one "legl:race" attribute assigned to it, then it is considered illegal for all races that are not explicitly specified as legal for it (via other instances of this attribute). Similarly, if a record has even one "legl:mode" attribute assigned to it, then it is illegal for all other modes that are not specified as legal. However, a distinction is made between race and mode legality, so a record with only "legl:race" attributes will be legal for all modes, and vice versa.

      Example: A record is only available when creating a tounament army (legl:mode=tournie).
  lglx:
    :shortdesc: restrict mode/race access
    :attr_type: :ext_unit_attrs
    :attr_id: lglx
    :syntax: lglx:expr
    :longdesc: |-
      The record is legal (i.e. made available to the user) if the specified boolean expression evaluates to a result of 'true'. Non-legal records are ignored entirely by Army Builder. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against, consisting of one of the following:

          race=xx
          mode=abbrev
          mode<=abbrev
          mode>=abbrev
          time=X
          time<=X
          time>=X

      [Multiple] [ABLite]

      Example: A sample legality test expression might look like "lglx:(((race=el|mode=zzz)^!mode>=yyy)&time<1492)"
      must:option=option@[min|max]=count{#when}{#race}{#mode}{#legal}{#istype}
  must:
    :shortdesc: option required for unit
    :attr_type: :ext_unit_attrs
    :attr_id: must
    :syntax: must:categ=category{+category...}@[min|max]=count{-msg=msg}{#when}{#race}{#mode}{#legal} {#istype}
    :longdesc: |-
      This attribute has two distinct forms that it can be defined in, the syntax for each being shown above. The first form specifies an explicit option that is required to be selected for the unit, and that option is stipulated by its unique id. The second form allows a set of one or more option categories to be specified. With this alternate form, each category is given by its defined name, and multiple categories can be combined by separating them with a '+' sign. If a single category is given, then an option of that category must be selected by the user for this unit. When multiple categories are given, then an option any of the indicated categories must be selected by the user.

      There are additional factors to the requirements that are to be enforced, too. The number of times the option set is selected for the unit must satisfy the specified minimum or maximum count. When range-based options are used, the current range count is considered to be the count which is used by this attribute during validation. As a special case, count can be given as '#', in which case the current unit size is used as the count.

      [Validation] [Multiple]

      Note: Typically, this type of requirement would seem ridiculous, since the option could simply be specified as "auto" or "incl" as its link nature. However, certain options enable run-time selection as part of their processing (e.g. choosing a monster mount from a list or selecting a leader for a unit), and this attribute ensures that such options are properly selected by the user. Another use would be to require the user to select a weapon for a unit, where numerous options are available to choose from.

      Example: The unit must be given either a weapon or armor option (must:categ=weapon+armor@min=1).

      Example: The unit must assign weapons for all models in the unit (must:categ=weapon@min=#).
  ocat:
    :shortdesc: max options within category
    :attr_type: :ext_unit_attrs
    :attr_id: ocat
    :syntax: ocat:categ{+categ...}@x:y[m|u]{-[min|max]}{-roundup}{-global}{-msg=msg}{#when}{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute governs the number of times that an option of the specified category can appear within the context of the parent unit. It is valid to specify more than one option category by separating each category with a '+' symbol. The requirement is specified as a ratio of x to y, indicating either a number of models (m) or units (u) that exist within the proper context. If x is less than y, a maximum of x instances of the option may appear for every y instances where the option could be taken. If x is greater than y, a minimum of y instances of the option must appear for every x instances where the option could be taken. The case where x is equal to y indicates that all models/units must select an option from the list of categories. To indicate a flat maximum, such as a maximum of 4 models in the unit may select the option category, specify a value of 0 for y. For a flat minimum, specify a value of 0 for x.

      There are some situations where a 1:1 ratio needs to be explicitly treated as a minimum or maximum ratio, which is an exception to the standard handling. This can be achieved by specifying either the "-min" or "-max" qualifier, which override the default behavior and force either a minimum or maximum comparison. This override is useful in situations such as when a set of units can have no more than 1 of an option per total models, but the mixture can vary between the various child units.

      When a minimum or maximum ratio is specified, the "-roundup" qualifier can be used to change the behavior. If used with a maximum ratio, the unit size required is rounded up to the next multiple before the comparison is made. For example, the ratio of 1:3 normally triggers the error when the unit size is 4 and the option count goes to 2. When "-roundup" is specified, the unit size of 4 is rounded up to the next multiple of 6, so an option count of 2 is valid. If used with a minimum ratio, the unit size required is also rounded up before the comparison. For example, the ratio of 3:1 normally triggers the error when the unit size is 4 and the option count remains at 1. When "-roundup" is specified, the unit size of 4 is rounded up to 6, so an option count of 2 is not required until the unit size reaches 6.

      The restriction context is typically limited in scope to a top-level unit and all of its children. However, it is also possible to specify that the restriction is global across the entire roster by specifying the optional "-global" flag.

      [Validation] [Multiple]

      Note: If the scope is specified as a single top-level unit, the top-level unit does not have to have this attribute for the enforcement to take place. In this instance, the counts of all child units that possess this attribute are combined and reconciled against each other.

      Note: If the "rang" attribute is used in conjunction with any of the options that match the specified set of categories, the "counting" behavior of this attribute is special. If the range option is not selected, then the potential count (y) is treated as 1 and the actual count (x) is 0. However, if the range option is selected, the potential count is the maximum range value and the actual count is the currently specified value.

      When the limit is based on the model count, range-based options are not multiplied by the model count, while all other options are. This allows the range-based option to specify a number that is less than the total number of models in the unit.

      Note: If the "-when" qualifier is used on with "ocat", it is handled slightly differently from normal. The comparison against the specified type is only applied to the TOP-LEVEL unit of the context, and it is only used in conjunction with the non-global form of the attribute.

      Example: Models within Unit A can have varied equipment, so one set of child models is given Option A (of the category light weapon), another set is given Option B (heavy weapon), and the parent unit is assigned Option C (heavy weapon). The total combined number of models that can have options from category "heavy weapon" cannot exceed 4 (ocat:heavy@4:0m).

      Example: No more than two units in the army may possess options belonging to the categories Cat1, Cat2, or Cat3 (ocat:Cat1+Cat2+Cat3@2:0u-global).

      Example: At least 1 of every 3 models in Unit A must have an option of category Cat1 (ocat:Cat1@1:3m).
  race:
    :shortdesc: unit restricted to races
    :attr_type: :ext_unit_attrs
    :attr_id: race
    :syntax: race:list{#mode}{#legal}
    :longdesc: |-
      This unit is made available to the races given in the specified list, as well as the primary race for the unit. The list is a comma-separated list of two-letter race abbreviations. This attribute is typically only useful in conjunction with shared races, as this allows individual units to be specifically enabled and disabled for different races. However, if a unit can be inherently shared between two or more races, this attribute can be used to specify the additional races for which the unit is valid.

      [Multiple] [ABLite]

      Note: Even though a unit is specified as being available for another race, it still "belongs" to its primary race. As such, all special item restrictions for the unit are based on the primary race only. Similarly, the leader/follower mechanism is also tied explicitly to the primary race. This means that the real function of this attribute is to assign the unit to the appropriate composition group instead of allies.

      Example: Some monsters might only be available for certain races, and this attribute allows a monster to specify which races it should be visible for (race:br,em,hi,wd).

      Example: Unit A is part of Race YY, but it can also be fielded normally in armies of Race ZZ (race:zz).
  reqd:
    :shortdesc: inter-unit dependency
    :attr_type: :ext_unit_attrs
    :attr_id: reqd
    :syntax: reqd:[unit|type]=name{@x[m|u]:y[m|u]}{-free=f}{-min=n}{-lead}{-msg=msg}{#when}{#race}{#mode}{#legal}{#istype}
    :longdesc: |-
      This unit requires that another unit also exist in the army and that it satisfies a special dependency relationship. This other unit must possess a unique id or unit type that matches name. The dependency relationship usually takes the form of a ratio. If no ratio is specified, then one qualifying regiment must exist within the army to enable any number of regiments of the dependent unit. A ratio is specified in the form x of the dependent unit (this unit) versus y of the unit (or unit type) depended upon. A maximum of x is allowed per y. For both components of the ratio, the ratio must also specify whether to compare the total number of models (m) or the number of units (u). It is valid to compare models for one and units for the other. If a value of 0 is given for x, then the requirement for y is interpreted as a flat minimum. In other words, when x is 0, as long as there are y units/models in the roster, any number of dependent units/models can be present.

      If the "-free" qualifier is specified, then the ratio is only applicable when the number of free models/units f is exceeded for the dependent unit. If the "-min" qualifier is specified, then units depended upon must have at least n models in them to qualify. If the "-lead" qualifier is specified, then the required unit must also have the same leader assigned to it as the dependent unit in order to qualify. Requirements processing will only identify suitable top-level regiments for counting, unless the "forc" attribute is used (i.e. no children are processed to determine if requirements are satisfied).

      [Validation] [Multiple]

      Example: Unit A requires one unit of type "xxxx" in order to have any number of Unit A (reqd:type=xxxx).

      Example: Each regiment of Unit C requires one model of Unit D (reqd:type=smp@1u:1m).

      Example: Each model of Unit E requires one of a number of units of type "xxxx" for each model, and each unit must have at least 10 models in it (reqd:type=xxxx@1m:1u-min=10).

      Example: There can be 2 models of Unit G in the army before a two-for-one dependency ratio is required upon units of type "xxxx" (reqd:type=xxxx@2m:1u-free=2).

      Example: From 4 to 20 models of Unit H can normally be present in a roster, but if 4 or more models of Unit J are present, then at least 8 models of Unit H are required (reqd:unit=H@0m:8m-free=3).
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :ext_unit_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  slmt:
    :shortdesc: max units with special item
    :attr_type: :ext_unit_attrs
    :attr_id: slmt
    :syntax: slmt:count{-msg=msg}{#race}{#mode}{#legal}
    :longdesc: |-
      Only count regiments of this unit may be given a special item.

      [Validation] [Multiple]
  tcon:
    :shortdesc: contextual type ratios
    :attr_type: :ext_unit_attrs
    :attr_id: tcon
    :syntax: tcon:{!}name1@x[m|u]:{!}name2@y[m|u]{-flat}{-free=f1:f2}{-msg=msg}{#when}{#race}{#mode}{#legal}{#istype}
    :longdesc: |-
      This attribute is very similar to the "trat" race attribute, except that its scope is restricted to the unit it is defined for and all of that unit's children. No other units are factored into the validation test (unlike "trat", which operates on a global level for the entire roster). The attribute specifies a relationship between units of two different types, where the types are given as name1 and name2. A minimum ratio must exist between the two types, where at least x of type1 must exist for every y of type2. The ratio must be adhered to within the context of the current unit and all of its children. If the ratio between the two types must be exact, then two separate relationships must be defined - one in either direction. It is possible to compare the total number of models of each type or the number of units of each type. This is dictated by either an m or u being appended to each of the counts. The relationship assumes that all instances of each type are counted towards the ratio.

      In some cases, it may be necessary to compare the number of units that are NOT of a particular type, and this can be specified by prefixing the type name with a '!' character. It is not valid to use the '!' syntax for both type names at the same time. To specify a flat requirement, wherein x instances of type1 are sufficient for any number of instances of type2, use the "-flat" qualifier (and the "-free" qualifier will be ignored). If one or more instances of either type are "free" and not counted towards the ratio, then the "-free" modifier can be specified, indicating the number of free instances allowed for both types, f1 and f2. If a value of 0 is given for x, then the presence of any units of type2 will be considered invalid (i.e. this allows you to specify that troops of type1 cannot exist with troops of type2). In this case, the "-free" qualifier is ignored for the f1 value.

      [Validation] [Multiple]

      Note: If a unit matches BOTH of the specified types, then it is counted towards the totals for BOTH criteria.

      Note: If the models form is used, then the number of models is the actual count for each child unit and the parent. This is distinct from the "trat" attribute, which always uses the effective model count for the unit (because it is typically only processing top-level units).

      Note: If the units form is requested, then each individual child unit counts as its own unit. For example, a unit that has two separate specialist units as children, where each specialist unit has 3 models each, would be considered as having 2 specialist units.

      Example: There must be at least five models present in the parent unit for each child specialist unit that is added to the parent (tcon:NonSpec@5m:Spec@1m).

      Example: There must be five non-specialist models present for each specialist model in the unit (tcon:!Spec@5m:Spec@1m).
  tloc:
    :shortdesc: test types within unit
    :attr_type: :ext_unit_attrs
    :attr_id: tloc
    :syntax: tloc:[is|not|both|either|neither|one|first|when|whennot]=type1{-type2}{-msg=msg}{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute establishes a validation test that is local to the unit. The test involves up to two different types that may or may not have been assigned to the unit. There are six different tests that can be performed, each of which is described below:
         is - the unit must have type1 assigned to it (no additional type should be specified)
         not - the unit must NOT have type1 assigned to it (no additional type should be specified)
         both - the unit must have both type1 and type2 assigned to it
         either - the unit must have either type1 or type2 assigned to it
         neither - the unit must have neither type1 nor type2 assigned to it
         one - the unit must have exactly one of type1 or type2 assigned to it, but not both
         first - the unit must be assigned type1 and must not be assigned type2
         when - when the unit has a type matching type1, then it must also have one matching type2
         whennot - when the unit has a type matching type1, then it must NOT also have one matching type2

      [Validation][Multiple]

      Example: The unit must have either the type "foo" or the type "bar" assigned to it (tloc:either=foo-bar).

      Example: If the unit has a type that matches "honor?", then it must have a type matching "honor123?" (tloc:when=honor?-honor123?).
  umax:
    :shortdesc: maximum units within army
    :attr_type: :ext_unit_attrs
    :attr_id: umax
    :syntax: umax:count[m|u]{@size}{-free=free}{-part}{-lead}{-min=min}{-msg=msg}{#when}{#race}{#mode}{#legal}{#istype}
    :longdesc: |-
      This unit is restricted to a maximum of count regiments or models in an army per each size increment of the army in points. The specified maximum count can represent the total number of models (m) or units (u) within the roster. If size is omitted, then the count is fixed for the army, regardless of the point size.

      If the "-free" qualifier is given, then free units/models are ignored before the size restriction begins to be enforced. If the "-part" qualifier is specified, the size limit is interpreted as being partial, so count regiments are allowed for each size increment or portion thereof. If "-part" is not specified, then partials are not allowed. If the "-lead" qualifier is specified, the limit only applies to units which share the same leader (using the leader/follower mechanism). In some cases, a unit will only be allowed within armies that exceed a minimum size, in which case the "-min" qualifier should be used to specify the required min point size. When "-min" is used, any size specification applies only to the points over and above the minimum size.

      [Validation] [Multiple]

      Example: One regiment of Unit A is allowed per full 1000 points of army size (umax:1u@1000).

      Example: One model of Unit B is allowed per 1000 points or fraction thereof (umax:1m@1000-part).

      Example: One regiment of Unit C is all that can ever exist in an army (umax:1u).

      Example: One regiment of Unit D can exist as the follower of a given leader (umax:1u-lead).

      Example: Up to 5 models of the unit are allowed, plus an addition 1 model for every 500 full points of army size (umax:1m@500-free=5).

      Example: In order to take Unit E, the army size must be at least 2000 points. In addition, only one of Unit E may be taken for each 1500 points over the minimum (umax:1u@1500-min=2000).
  umin:
    :shortdesc: minimum units within army
    :attr_type: :ext_unit_attrs
    :attr_id: umin
    :syntax: umin:count[m|u]{@size}{-part}{-thresh=min}{-lead}{-msg=msg}{#when}{#race}{#mode}{#legal}{#istype}
    :longdesc: |-
      This unit is required to have a minimum of count regiments or models in an army per each size increment of the army in points. The specified minimum count can represent the total number of models (m) or units (u) within the roster. If size is omitted, then the count is fixed for the army, regardless of the point size. If the "-part" qualifier is specified, the size requirement is interpreted as being partial, so count regiments are required for each size increment or portion thereof. If "-part" is not specified, then the requirement is for each full size increment. Optionally, a minimum count threshold can be stipulated, in which case the rule only applies when the threshold is exceeded. If the "-lead" qualifier is specified, the limit only applies to units which share the same leader (using the leader/follower mechanism).

      [Validation] [Multiple]

      Warning: This attribute is only applicable once the unit has been added to the roster. If the unit has not been added to the roster, then no minimum restriction is imposed. To require that at least one of the unit be added to the roster, you should use either the "ulmt" or "need" race attribute.

      Example: At least one regiment of Unit A is required per full 1000 points of army size (umin:1u@1000).

      Example: One model of Unit B is required per 1000 points or fraction thereof (umin:1m@1000-part).

      Example: One regiment of Unit C must always exist in an army (umin:1u).

      Example: Six models of Unit Z must exist in army if more than 2 models are added (umin:6m-thresh=3).

      Example: One regiment of Unit D must exist as the follower of a given leader (umin:1u-lead).
:local_unit_attrs:
  attr:
    :shortdesc: assign text as stat value
    :attr_type: :local_unit_attrs
    :attr_id: attr
    :syntax: attr:name="value"{#race}{#mode}{#legal}
    :longdesc: |-
      The stat value with the given name is replaced with the text value given within double-quotes. This text value is displayed both in the list of Available Units and when a unit has been added to the Roster. Only one such attribute can be specified for a given stat.

      [Multiple] [ABLite]

      Example: Some units might have random movement, requiring it to be shown as "3D6" (attr:mv="3D6").
  auto:
    :shortdesc: auto-select options
    :attr_type: :local_unit_attrs
    :attr_id: auto
    :syntax: auto
    :longdesc: |-
      When the unit with this attribute is added to the roster, the parent regiment will be scanned. All options for this unit that are currently selected for the parent unit will be automatically selected as their initial state. This only applies to options that are selectable for this unit, so options that have either the "auto" or "incl" link nature are already selected by default and will not be de-selected. If the "only" attribute is also used for this unit, any mappings that are specified by the "only" attributes will be properly observed and selected for the unit. This attribute has no parameters, and it is only applicable if there is a parent unit to inherit state from.

      [Single]

      Example: Unit leaders inherit the same options that are selected for the regiment they are associated with.
  bcst:
    :shortdesc: bound cost of unit
    :attr_type: :local_unit_attrs
    :attr_id: bcst
    :syntax: bcst:{min=x}{-}{max=y}{-exempt}
    :longdesc: |-
      This attribute bounds the total cost for the unit to a specified minimum and/or maximum value. If a unit has more than one model, the bounded cost is used for each individual MODEL within the unit. The '-' separator is required if both a minimum and maximum are given. Only The basic cost for the unit and its options are bounded to the specified values.

      By default, cost bounding is enforced on all points associated with the unit, excluding points due to special items (see below for details). All points associated with "cost:single" options are also included within the bounding. Normally, this is the desired behavior, but there are exceptions. If the "-exempt" qualifier is given, all points due to "cost:single" options are excluded from the cost bounding. This means that the bounding is performed on the unit and THEN the points for the appropriate options are added to the total unit cost.

      The cost of items is typically excluded from control, being applied AFTER the constraint is determined. However, if the unit is assigned the "icst:each" attribute, then the cost of items IS included within the bounding calculation, as the items are factored into the cost of each model. The bounding occurs AFTER multipliers are applied for option costs (e.g. "mult" attribute), but BEFORE multipliers are applied for other purposes (e.g. "ucst" attribute).

      [Single] [ABLite]
  boun:
    :shortdesc: stat value is bounded
    :attr_type: :local_unit_attrs
    :attr_id: boun
    :syntax: boun:name-[max=x|min=y|adj=z]{#legal}
    :longdesc: |-
      The stat value with the given name is bounded so that it can never be adjusted outside of the specified restriction. The restriction specifies either a maximum value x, a minimum value y, or an adjustment limit z that restricts adjustment to no more than the given amount. Only one such attribute can be specified for a given stat.

      [Multiple]

      Note: If the adjustment restriction form of this attribute is used, changes made to the base value of the stat (i.e. via the "base" attribute) are exempt from any restriction.

      Warning: It is not possible to apply a bounded adjustment limit (e.g. "boun:mv-adj=2") on a stat that is multiplied via an option using an attribute like "stat:str*2". Only minimum and maximum bounding can be enforced upon a stat that is multiplied.

      Example: Sturdy warhorses can never have their movement adjusted (boun:mv-adj=0).

      Example: Naturally slow troops can never move slower than a 3 (boun:mv-min=3).
  calc:
    :shortdesc: calculate a stat value
    :attr_type: :local_unit_attrs
    :attr_id: calc
    :syntax: calc:stat=expr{-[round|roundup|rounddown]}{#race}{#mode}{#legal}
    :longdesc: |-
      The value of the specified stat is calculated based on the given arithmetic expression, overriding any other adjustments to the stat. The expression can contain up to 4 terms, which may be literal values, stat abbreviations, '#' for the model, or '%' for the item count. Optional rounding can be performed upon the stat as part of the calculation.

      [Single] [ABLite]

      Note: If a "calc" attribute is assigned to a unit for a stat that has a derived stat calculation defined in the definition file, the "calc" attribute takes precedence.

      Example: A calculated stat might look like "calc:ld=to+sp/at".
  catg:
    :shortdesc: assign unit category
    :attr_type: :local_unit_attrs
    :attr_id: catg
    :syntax: catg:name{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is considered to belong to the unit category with the abbreviation name in addition to any other categories that it is already assigned to.

      [Multiple] [ABLite]

      Example: An army leader might also be a mage. Since only one category can be directly assigned to the unit, the second category is assigned as an attribute (catg:wiz).
  clon:
    :shortdesc: duplicate option set
    :attr_type: :local_unit_attrs
    :attr_id: clon
    :syntax: clon:unit
    :longdesc: |-
      Clone all of the option links that exist for the specified unit, establishing equivalent links to the same options from this unit. If a particular option is already assigned to this unit, then it is ignored during cloning.

      [Multiple] [ABLite]
  comm:
    :shortdesc: append/override comments
    :attr_type: :local_unit_attrs
    :attr_id: comm
    :syntax: comm:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard comments field of the record. This data will appear within the standard comments for the record, just as if the comments were part of the defined comments. The "-clear" qualifier causes all previously accrued comments for the record to be discarded. The text specified by the attribute becomes the first comments text that is displayed for the record.

      [Multiple] [ABLite]
  coun:
    :shortdesc: unit count is accumulated
    :attr_type: :local_unit_attrs
    :attr_id: coun
    :syntax: coun{:-no}
    :longdesc: |-
      The total count for this unit is added to the overall total count for the parent regiment. The optional "-no" qualifier indicates that the regiment should not be counted towards the total when inter-unit relationships are being computed. This attribute is only applicable if there is a parent unit to count towards.

      [Single]

      Note: If there is a hierarchy of units, then the count is reset to zero at any level where the current child does not possess this attribute. Therefore, it is possible to use this attribute for sub-levels within a hierarchy.

      Example: Unit leaders often need to be counted towards the size of the unit they accompany, so they must be designated with this attribute.

      Example: A unit can possess up to 6 total models, but can also contain weapon specialists as part of that total. The specialist units must be assigned this attribute so that they count towards the total number of in the overall unit.
  dflt:
    :shortdesc: option selected by default
    :attr_type: :local_unit_attrs
    :attr_id: dflt
    :syntax: dflt:option
    :longdesc: |-
      The specified option, given by its unique id, is selected as its initial default state. If the option does not exist or the option possesses an "auto" or "incl" nature, then this attribute has no effect.

      [Multiple] [ABLite]

      Example: Unit A can take an option at no cost, so there is no reason to require that the user always select the option. Instead, the option can be selected by default, allowing the user to de-select it if desired.
  disp:
    :shortdesc: control unit visibility
    :attr_type: :local_unit_attrs
    :attr_id: disp
    :syntax: disp:noprint
    :longdesc: |-
      This attribute controls whether a unit is visible to the user and under what conditions. Currently, the only option is to have a unit that is hidden within roster output (i.e. only visible during roster construction). This enables child units to be used to display information (e.g. stat-sets) for parent units during roster construction where the visible space is not sufficient. However, those child units are suppressed from roster output, with the assumption being that their net influences are propogated up to the parent unit for final output.

      [Single] [ABLite]

      Note: This attribute is only recognized on child units.

      Warning: Do NOT attach items to a hidden unit. This mechanism is lightweight and only affects the specific unit - none of its items or other facets are affected.
  dtyp:
    :shortdesc: delete matching types
    :attr_type: :local_unit_attrs
    :attr_id: dtyp
    :syntax: dtyp:name{-grand}{#race}{#mode}{#legal}
    :longdesc: |-
      If the unit is currently tagged as belonging to any unit types matching name, those type tags are deleted. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the unit) has all matching types deleted. If "-grand" is specified and this is a top-level unit, the attribute is ignored. If the unit has no matching type names, then this attribute is ignored. It is not possible to delete the primary type assigned to a unit.

      [Multiple] [ABLite]

      Note: This attribute will not touch the primary type assigned to a unit. It will only effect secondary types that are assigned to the unit at run-time. Attempts to delete the primary type of a unit will be ignored. It is perfectly valid to have a unit with no primary type and only secondary types, so you can use the "type" attribute to assign initial types to a unit that can be deleted at run-time with this attribute.

      Warning: Be very careful with the relative evaluation priorities of your options and items when using this attribute, because a type must already be added to a unit in order for it to be deleted. If this attribute is processed before the type is added to the unit, then this attribute will appear to be not working, while the problem is actually a matter of sequencing and timing.
  icst:
    :shortdesc: item cost behavior
    :attr_type: :local_unit_attrs
    :attr_id: icst
    :syntax: icst:each
    :longdesc: |-
      When this attribute is assigned to a unit, the cost of all special items is computed differently. By default, the cost of special items is calculated and added once to the total cost of the unit. However, when the "each" method is used, the cost of special items is multiplied by the total number of models in the unit.

      [Single] [ABLite]
  incl:
    :shortdesc: auto-include child option
    :attr_type: :local_unit_attrs
    :attr_id: incl
    :syntax: incl:unit-option{@[free|cost|incl|auto|hide]}
    :longdesc: |-
      The unit with this attribute is exerting explicit control over the options for a child unit. The child unit, given by its unique id, is automatically given the specified option, also given by its unique id, as an option. The link nature for the option can be optionally specified, defaulting to "included" if not given. The net effect is just as if the child unit specifically had a link to the option with the designated nature. If the child unit already has an option with the specified unique id, that option is eliminated from the unit first (just as if the "elim" attribute for options was used), after which the new option with the new link nature is added.

      [Multiple] [ABLite]

      Example: Units of Knights have warhorses which include barding. Those same horses might be chosen for leaders, in which case the barding must be an option for the horse. This attribute overrides the optional barding and specifies it to be included for the unit (incl:horse-barding).
  inhl:
    :shortdesc: inherit attributes
    :attr_type: :local_unit_attrs
    :attr_id: inhl
    :syntax: inhl:unit
    :longdesc: |-
      Inherit all local unit attributes defined for the specified unit, treating them all as if specified explicitly for this unit.

      [Multiple] [ABLite]
  ipts:
    :shortdesc: item cost restrictions
    :attr_type: :local_unit_attrs
    :attr_id: ipts
    :syntax: ipts:{total=total}{-}{each=each}{#mode}{#legal}
    :longdesc: |-
      This attribute restricts the points that can be spent on special items for the unit. The restriction can take one of two forms. To limit the total number of points spent on items, use the "total=" qualifier, in which case the unit will be unable to add items that would exceed this total. To limit a unit to only have access to items up to a maximum cost, use the "each=" qualifier, and no items will be displayed that exceed the specified cost each. It is also valid to specify both of these qualifiers, in which case a separating '-' must be included before the "each=" qualifier. However, it is illegal to specify neither qualifier.

      Note: If an "ipts" attribute is specified for a unit and an "ipts" attribute is also specified for the race, the unit-specific values always override the race restrictions, regardless of whether the unit-specific restrictions are higher or lower. However, if multiple unit-specific attributes are encountered, the most restrictive values are always used.

      [Multiple]

      Example: Unit leaders cannot take items of greater than 25 points value (ipts:each=25).

      Example: The General of your army cannot take items worth more than 50 points each and cannot take more than 100 total points of items (ipts:total=100-each=50).
  mgnt:
    :shortdesc: magnetize children
    :attr_type: :local_unit_attrs
    :attr_id: mgnt
    :syntax: mgnt
    :longdesc: |-
      The unit will "magnetize" all child units that belong to other composition groups. When magnetized, the points for those child units are added into the composition group for this unit instead of the group for the child unit. Only the topmost regiment that possesses this attribute will magnetize points for its children, since children with this attribute are already re-directing their points to their parent. In order to exempt a unit from being magnetized by its parent, use the "comp" attribute. This attribute has no parameters.

      [Single] [ABLite]
  mirr:
    :shortdesc: mirror parent option
    :attr_type: :local_unit_attrs
    :attr_id: mirr
    :syntax: mirr:option
    :longdesc: |-
      The specified option, given by its unique id, must always maintain the same selection state (selected or not) for this unit as is currently the state in the parent regiment. This attribute is only applicable if there is a parent unit that can be mirrored.

      [Single] [ABLite]
  mult:
    :shortdesc: cost multiplier
    :attr_type: :local_unit_attrs
    :attr_id: mult
    :syntax: mult:[option|spec]=x{#race}{#mode}{#legal}
    :longdesc: |-
      All options or special items for this unit are computed with the indicated cost multiplier x.

      [Multiple] [ABLite]

      Example: Some units must pay double the normal for options (mult:option=2), while others only pay half (mult:option=.5).
  name:
    :shortdesc: override unit name
    :attr_type: :local_unit_attrs
    :attr_id: name
    :syntax: name:"name"{#race}{#mode}{#legal}
    :longdesc: |-
      Override the name of the unit with the new name specified within double quotes. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  note:
    :shortdesc: append/override notes
    :attr_type: :local_unit_attrs
    :attr_id: note
    :syntax: note:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard notes field of the record. This data will appear within the standard notes for the record, just as if the notes were part of the defined notes. The "-clear" qualifier causes all previously accrued notes for the record to be discarded. The text specified by the attribute becomes the first text that is displayed for the record.

      [Multiple] [ABLite]
  only:
    :shortdesc: option mimics parent
    :attr_type: :local_unit_attrs
    :attr_id: only
    :syntax: only:option{=mapping}{-parent}
    :longdesc: |-
      The unit with this attribute will only have the option, given by its unique id, made available if the parent of this unit also has the same option available to it. The option must also be linked to the unit via the normal means, else the option will never appear for the unit. If an optional mapping is specified, then the option is verified to exist for the parent, as normal, but the option within the child that has the mapping as its unique id is the option whose availability is controlled. The mapping, if included, is also used by the "auto" attribute.

      Only options that are explicitly linked to the parent unit can have an "only" dependency established successfully. If the parent has a chained option (via the "more" attribute), the parent will be considered to not have the option for the purposes of this attribute. If the unit has no parent unit, then the option will be made available, unless you specify the "-parent" qualifier, which will suppress the option if there is no parent.

      [Multiple] [ABLite]

      Example: Unit leaders are restricted to only having the same options available to them as the unit that they are associated with. This attribute allows a single leader unit to be defined with options that are all dependent upon whether the parent unit has the option (only:shield;only:armor;only:twohand).

      Example: Units that possess an "upgrade" option require that the unit leader select the full option. For example, if the unit comes with normal bows and has a "longbow upgrade" option, the unit leader must have the normal bow and longbow options. The mapping allows the "longbow upgrade" option for the unit to be interpreted as the "longbow" option for the leader (only:lbowupg=longbow).
  ratp:
    :shortdesc: ratio with parent
    :attr_type: :local_unit_attrs
    :attr_id: ratp
    :syntax: ratp:[min|max|fix|abs]=x:y
    :longdesc: |-
      This attribute establishes a special ratio between the unit and its parent unit. The ratio can be one of four possible types, with the values x and y having meaning dependent upon the type of ratio. This attribute is only applicable if there is a parent unit to establish a relationship with. The valid ratio types are:
         min - there must be a minimum of x models of this unit for every y models of the parent unit
         max - there can only be a maximum of x models of this unit for every y models of the parent unit
         fix - there must always be exactly x models in this unit for every y models in the parent
         abs - the size of this unit is bounded between the fixed range of x models and y models

      [Multiple]

      Note: Although it is valid to specify multiple instances of this attribute, there is only one situation where it makes sense to do so. If both a minimum and a maximum ratio need to be enforced, then it is valid to specify a constraint for each. If multiples of this attribute are defined that conflict with one another, the last one specified take precedence.

      Example: Unit A can have a maximum of 1 model of child Unit B for every 8 models of Unit A that are in the unit. The child Unit B would be defined as (ratp:max=1:8).

      Example: Unit A can contain 1-3 models of child Unit B, regardless of Unit A's size. The child Unit B would be defined as (ratp:abs=1:3).
  rmdr:
    :shortdesc: option gets remainder
    :attr_type: :local_unit_attrs
    :attr_id: rmdr
    :syntax: rmdr:categ=limit-option=id
    :longdesc: |-
      This attribute identifies a specific option that will be assigned all "remainder" selections. The primary objective for this attribute is in use with groups of ranged options. If you have two different ranged options whose combined total cannot exceed 6, then you can designate one for modification by the user and the other as holding the remainder - the amount unassigned by the user.

      The attribute specifies an option category, a total select count, and a specific option. After the user makes changes to the unit, the total number of selections for ALL options belonging to the given category are calculated. If the total does not equal the value given in the attribute, the specific option identified is adjusted upwards or downwards until the total is correct. If the option receiving the remainder has bounds specified for its range, those are properly observed, possibly resulting in the defined total NOT being able to be satisfied.

      The category can be specified as a list of multiple categories if desired, each separated by a '+'. The limit must either be an integer value or the '#' character to indicate that the current model count should be the limit. The option to be assigned the remainder amount must be given by its unique id.

      In general, the options governed by this attribute should NOT utilize a conflict group. If they are, then the desired functionality may be impaired. Once the total number of options reaches the limit imposed by the conflict group, all options will become disabled. This means that the user will not be able to increment an option to trigger the remainder option to be decreased. If a limit must be imposed specially, then "ocat" should be used instead of a conflict group to enforce that limit.

      Note: No more than three "rmdr" attributes can be specified on any unit. Each such attribute must reference completely distinct option categories, else the results are undefined. In addition, each attribute must specify a different option to receive the remainder amount.

      Note: Typically, the option designated as the "remainder" should be assigned the "dsab" attribute. This is because the behavior of the option will be as if the option has been disabled. Any attempt to increment or decrement the option will make the change and then have it reset to the original value, since the other options have not changed and the total must be maintained.

      Note: This attribute only governs options that are directly linked to the unit. Any options in the specified category that are linked via use of the "more" attribute are ignored when totalling up the current selection value.

      [Single] [ABLite]
  show:
    :shortdesc: show option for unit
    :attr_type: :local_unit_attrs
    :attr_id: show
    :syntax: show:option
    :longdesc: |-
      The specified option, given by its unique id, is made available for the unit by showing it. This assumes that the option is hidden by default.

      [Multiple] [ABLite]
  size:
    :shortdesc: override unit size
    :attr_type: :local_unit_attrs
    :attr_id: size
    :syntax: size:min{-max{-incr}}{#race}{#mode}{#legal}
    :longdesc: |-
      The size characteristics of the unit are overridden with the specified information. The unit will have a minimum size of min, a maximum size of max (defaults to unlimited), and an increment size of incr (defaults to 1 model). This attribute is basically pointless unless the race/mode restriction is employed, although it can be specified without the restrictions.

      [Single] [ABLite]

      Note: If you use either the "-race" or "-mode" qualifiers, then you must specify the max and incr values.
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :local_unit_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  spec:
    :shortdesc: allow item category
    :attr_type: :local_unit_attrs
    :attr_id: spec
    :syntax: spec:[+|-]category{#race}{#mode}{#legal}
    :longdesc: |-
      The specified special item category, given by its abbreviation, is either made available to the unit ('+') or expressly forbidden to the unit ('-').

      [Multiple] [ABLite]
  sraw:
    :shortdesc: raw stat output
    :attr_type: :local_unit_attrs
    :attr_id: sraw
    :syntax: sraw:stat1{,stat2{,...}}
    :longdesc: |-
      When this attribute is specified, all output of the listed stats of this unit is done in raw format. Any special text that would normally be prepended or appended to the stat is not added, nor is any sign for signed stats.

      [Single]
  sset:
    :shortdesc: use stat set for output
    :attr_type: :local_unit_attrs
    :attr_id: sset
    :syntax: sset:setname
    :longdesc: |-
      Assign the named stat-set to the unit for use when displaying the unit.

      [Single] [ABLite]
  strm:
    :shortdesc: enables 'multi-stat'
    :attr_type: :local_unit_attrs
    :attr_id: strm
    :syntax: strm
    :longdesc: |-
      This attribute designates the unit as possessing stat values that may contain "multi-stat" information. At run-time, the text within each stat is checked to see if it represents multiple stats separated by the vertical bar ('|') character and is handled specially if so. For more details, please refer to the separate "multi-stat" description in the manual. This attribute has no parameters.

      [Single] [ABLite]
  take:
    :shortdesc: unit always takes item
    :attr_type: :local_unit_attrs
    :attr_id: take
    :syntax: take:item{-free}{-perm}{#race}{#mode}{#legal}
    :longdesc: |-
      The unit must always include the special item, given by its unique id. If there is conflict in taking the specified item, then the unit will fail to be added to the roster. The "-free" qualifier is used to take the item for the unit without adding the points for the item to the unit cost. This is typically needed in situations where the cost of the item is already included in the total cost for the unit. If the "-perm" qualifier is specified, the unit is assigned the item permanently. The item cannot be deleted from the unit under any circumstances.

      [Multiple] [ABLite]

      Note: Remember that, in order for a unit to be assigned any special items, it must belong to a race and therefore cannot have a unique id that begins with an 'x'.

      Note: When the "-free" qualifier is used, the item cost is only ignored towards the total cost of the unit. The cost of the item still counts towards the total limit of points that may be spent on items for the unit. It is also still counted towards the total number of points spent on special items for the entire roster.
  tmul:
    :shortdesc: type multiplier
    :attr_type: :local_unit_attrs
    :attr_id: tmul
    :syntax: tmul:value
    :longdesc: |-
      This attribute designates that the unit's model count is multiplied by a fixed value whenever either the "trat" or "tlmt" attributes process this unit. Only the model count of the unit is effected, and only when one of the two specified attributes processes the unit (no other attributes recognize the multiplier). The purpose of this attribute is to allow special inter-unit relationships to be modeled within Army Builder. For example, consider an army list where unit A must normally have at least 40 models in it. For this particular list, the user can use models of unit B instead of unit A, but he must have 2 models of unit B for every model required of unit A. This means that if he has 20 models of unit B, he must still have 30 models of unit A. By using "tmul", this relationship can be defined.

      [Multiple] [Single]
  type:
    :shortdesc: assign unit type
    :attr_type: :local_unit_attrs
    :attr_id: type
    :syntax: type:name{-[grand|child]}{-nodups}{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is tagged as belonging to the unit type given by name, in addition to any other type names that the unit has already been assigned. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the unit) is assigned the type. If "-grand" is specified and this is a top-level unit, the attribute is ignored. If the "-child" qualifier is used, all child units are assigned the type, AS WELL AS the current unit. If the "-nodups" qualifier is specified, the new type will not be assigned to the unit if that type already is assigned one or more times. A maximum of 40 extra type names can be assigned to any one regiment at a time, with additional types being simply ignored.

      [Multiple] [ABLite]

      Note: The behavior of the "-child" form is different from the equivalent option attribute, which does NOT modify the current unit. If you need to ensure that the current unit does NOT get assigned the type, either follow the "type" attribute with a "dtyp" or assign the type via an option.

      Note: Use of the "-nodups" qualifier may conflict with the use of other functionality within Army Builder, such as the "cost" attribute with the "typecount" form. Use this qualifier judiciously.
  xcmp:
    :shortdesc: assign composition group
    :attr_type: :local_unit_attrs
    :attr_id: xcmp
    :syntax: xcmp:group{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is re-assigned to the newly designated composition group, given by its defined abbreviation. The inherently defined composition group for the unit is ignored, and all points for the unit are assigned to the new group. This re-assignment takes effect within the list of Available Units as well, so a re-assigned unit will be properly grouped with its re-assigned composition group for the user to select from.

      [Single] [ABLite]
  xcst:
    :shortdesc: override cost
    :attr_type: :local_unit_attrs
    :attr_id: xcst
    :syntax: xcst:cost{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute will override the price of the unit. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  xmpt:
    :shortdesc: exempt from selected rules
    :attr_type: :local_unit_attrs
    :attr_id: xmpt
    :syntax: xmpt:limit
    :longdesc: |-
      The unit with this attribute is considered exempt from one of the rules enforced by Army Builder. The set of values that can be specified for exemption are:
         limit - special item category limits are not enforced

      [Single] [ABLite]

      Example: Unit A is normally allowed to only have 1 special item of category "xyz", but this attribute allows that limit to be ignored so that any number of items can be taken from that category.
  zero:
    :shortdesc: unit size can be zero
    :attr_type: :local_unit_attrs
    :attr_id: zero
    :syntax: zero
    :longdesc: |-
      The size of the unit is allowed to go to zero with this attribute assigned. Normally, a unit's size cannot go below 1, but this attribute allows an exception, which is necessary in a few rare cases.

      [Single] [ABLite]
:option_attrs:
  acmp:
    :shortdesc: adjust comp group usage
    :attr_type: :option_attrs
    :attr_id: acmp
    :syntax: acmp:group[+|-]value[m|u]{#legal}
    :longdesc: |-
      This attribute adjusts the composition group allocation consumed by the unit. A specific composition group can be directly modified upwards or downwards in addition to the standard allocation used by the parent unit. The adjustment can be specified as either a literal value or it can be based on the model count of the unit by using a value of '#'. Either the model count ('m') or unit count ('u') of the specified composition group can be adjusted. This attribute makes it possible to have a unit count as multiple or fractional composition group allocations, allowing complete flexibility.

      [Multiple]

      Note: This attribute performs an explicit adjustment of the composition allocations. Therefore, the standard ally behaviors of units selected for armies of other races are NOT applicable. If you increase the size of composition group Q for unit X and unit X is chosen as an ally, the increase is still applied to group Q, even though the standard allocation for unit X is assigned to the ally composition group S.

      Note: This attribute is the counterpart of 'allw', which adjusts the allowed range for a composition instead of the actual usage.

      Example: Unit A counts as 1 selection each in groups X and Y. Assign the unit to group X normally and attach an option to adjust group Y (acmp:Y+1u).

      Example: Unit B counts as 2 selections in group X. Assign the unit to group X normally and attach an option to include the extra allocation (acmp:X+1u).
  allw:
    :shortdesc: adjust comp group allowances
    :attr_type: :option_attrs
    :attr_id: allw
    :syntax: allw:group-[min|max][+|-]value[m|u|p|%]{#legal}
    :longdesc: |-
      This attribute modfies the allowed composition limits for a specific composition group. The default limits established by the composition rule-set can be dynamically changed with this attribute. Any changes to the allowed ranges are reflected in the composition report, and the adjusted bounds are verified against the current usage of the roster. This is the preferred method of of handling non-linear composition rules and special exceptions to composition limits that arise in some game systems.

      [Multiple]

      Note: This attribute is the counterpart of 'acmp', which adjusts the actual usage for a composition instead of the allowed range.

      Example: Unit A enables two more units of group X to be added to the roster (allw:X-max+2u).
  apnd:
    :shortdesc: render option as an item
    :attr_type: :option_attrs
    :attr_id: apnd
    :syntax: apnd{:foot}
    :longdesc: |-
      The presence of this attribute causes the notes that would normally be output for the option to be appended as a separate "item" entry within the roster printout. This means that only the name of the option is listed in the notes for the unit it is attached to. All options with this attribute are appended at the end of all other entries for the top-level regiment, thereby appearing at the very bottom of the output for the top-level regiment. If more than one instance of the same option appears for the top-level regiment, then all duplicates are skipped, which is extremely useful for providing a single summary of items that may be taken by multiple units that are slightly differently equipped. Similarly, any duplicate footnotes with the exact same name (ignoring case) are also eliminated. In this latter case, care should be taken, since two similar options with the same name will potentially result in the inadvertent removal of duplicates.

      If the "foot" qualifier is specified, then the option is actually added as a footnote at the end of the roster. When multiple units have the exact same options, this method allows a single entry for the option to appear at the very end of the entire roster, shortening the roster printouts by a substantial amount in some circumstances.

      [Single] [ABLite]

      Example: Unit A can have its models equipped with various weapons, resulting in the possibility of multiple associated units that share the same weapon selection. In order to only display the details for the weapons once each for the entire unit, each weapon option would be specified with this attribute.
  base:
    :shortdesc: adjust base stat value
    :attr_type: :option_attrs
    :attr_id: base
    :syntax: base:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that is modifies the base value of the stat that is displayed (i.e. the value that appears on the left side of any slash).

      [Multiple] [ABLite]
  bttl:
    :shortdesc: raw text append to stat
    :attr_type: :option_attrs
    :attr_id: bttl
    :syntax: bttl:stat+"text"
    :longdesc: |-
      This attribute appends the specified text to the identified stat, just like the "stxt" attribute. The key difference is that this attribute performs a raw append BEFORE any "stxt" attributes are processed for the parent unit. Typically, this is not of any value, except when a data file makes use of the engine's "multi-stat" capability (described elsewhere). In this case, the attribute enables a new stat to be appended to the existing stat text, because the raw append allows a vertical bar ('|') to be appended to the current text string, effectively appending a new stat value. This newly appended stat value will have all other "stxt" attributes applied to it, just like all of the original stat values represented in the text.

      [Multiple]

      Note: If the unit that this attribute affects is not already designated as a "multi-stat" unit via the "strm" attribute, this attribute does NOT grant that state to the unit. Consequently, any unit that this attribute MAY be associated with must be assigned the "strm" attribute. Otherwise, the effects of this attribute will be no different than "stxt".
  catg:
    :shortdesc: assign unit category
    :attr_type: :option_attrs
    :attr_id: catg
    :syntax: catg:category
    :longdesc: |-
      The parent unit is considered to now belong to the specified unit category, given by its abbreviation.

      [Single] [ABLite]

      Example: Choosing Option A gives the unit the capabilities of an additional type of unit, so it needs to be classified as such.
  chld:
    :shortdesc: adjust child stat value
    :attr_type: :option_attrs
    :attr_id: chld
    :syntax: chld:type@name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}{-base}{-[first|last]}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that it modifies all child units that match the specified type value. The type value may contain wildcards. If the '-base' qualifier is specified, then the adjustment is applied to the base value of the stat and not the adjusted value (behaving like the "base" attribute instead of the "stat" attribute). Since the child adjustment is essentially cached by the parent for application to all children, the parent can specify wether the adjustment to the child should occur before ("first") or after ("last") all other options are processed for the child unit. This choice can be important when determining what types are assigned to the child, which dictates whether the child unit is adjusted or not. It also affects whether options on the child unit can work in conjunction with the adjustment from this attribute. Use of "first" means that only basic types directly assigned to the child unit will be evaluated to determine a match, although it does means that other options on the child unit CAN leverage the adjusted results of the stat. Use of "last" means that the fully evaluated 'net' type assignments on the unit will be utilized to determine if the adjustment should be applied. If no qualifier is specified, the default behavior is equivalent to "last" for backwards compatability.

      [Multiple] [ABLite]

      Note: Options are typically processed in their order of priority, but the "chld" attribute works in the INVERSE of what might be considered intuitive. The existence of a "chld" attribute is cached when it is encountered, and then its effects are applied to all subsequent child units which satisfy the established criteria. This means that the "chld" attribute must be processed BEFORE all of the child units are processed instead of after (which might be the intuitive conclusion). Therefore, options which use this attribute must be assigned a category whose priority is higher than any options which might include a child unit.

      Example: A unit with both Option A and Option B causes the movement of the child mount to be decreased by one, so both options would be defined the same way (chld:mount@Mv-.5).
  comm:
    :shortdesc: append/override comments
    :attr_type: :option_attrs
    :attr_id: comm
    :syntax: comm:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard comments field of the record. This data will appear within the standard comments for the record, just as if the comments were part of the defined comments. The "-clear" qualifier causes all previously accrued comments for the record to be discarded. The text specified by the attribute becomes the first comments text that is displayed for the record.

      [Multiple] [ABLite]
  comp:
    :shortdesc: points go to comp. group
    :attr_type: :option_attrs
    :attr_id: comp
    :syntax: comp:group
    :longdesc: |-
      The cost of all child options and child units of this option are always applied to the specified composition group, given by its defined abbreviation. Even if the parent unit has the "mgnt" attribute, which would normally causes all points to be applied to the parent unit's composition group, this option and its children are instead allotted to the specified group.

      [Single] [ABLite]
  cost:
    :shortdesc: cost is special
    :attr_type: :option_attrs
    :attr_id: cost
    :syntax: cost:{model|single|grandcount|stat@stat|typecount=type|expr=expr}{*x}
    :longdesc: |-
      The cost of this option is computed specially. In all cases EXCEPT an expression, the special cost value is multiplied by the value given in x (which defaults to 1). The "model" form calculates the option cost as the same as a single model in the unit. The "single" form applies the defined cost of the option once to the total for the unit, not on a per-model basis. The "grandcount" form uses the model count of the grandparent unit. The "stat" form requires a stat abbreviation to be given, with the option cost computed as the current stat value. The "typecount" form calculates the total number of times that the unit is assigned the specified type value. The "expr" form defines the cost as an arithmetic expression that can reference other stat values, with the expression syntax identical to "stat".

      [Single] [ABLite]

      Note: The "cost:expr" form can be combined with the "cost:single" attribute on the same option to yield a calculated expression cost as a single cost for the entire unit.

      Warning: When the "stat" form is used, the stat value upon which the cost computation is based is the base value for the stat. This means that an option which uses the "base" attribute to modify the base stat value will have the computation performed on the net adjusted stat value. Therefore, with this particular attribute, you should use the "stat" attribute to modify the stat value so that you obtain the intended cost result.

      Example: Some game systems will have options that cost the same as a single model in the unit (cost:model).

      Example: An option can be purchased for a unit that costs a flat amount, regardless of the number of models in the unit (cost:single).

      Example: The cost of the option is 3 points for each time that a type beginning with "spell" is assigned to the unit (cost:typecount=spell?*3).

      Example: The cost of the option is a function of the unit's STR stat times 3 (cost:stat@str*3).

      Example: A complex expression calculating the cost might look like "cost:expr=Mv*At+Ld-12"
  csiz:
    :shortdesc: adjust child unit size
    :attr_type: :option_attrs
    :attr_id: csiz
    :syntax: csiz:unit[+|-]count
    :longdesc: |-
      The specified child unit, given by its unique id, has its size adjusted by the specified count. If the parent unit does not have any children with the given unique id, then this attribute is ignored.

      [Multiple] [ABLite]

      Warning: In order for the effects of this attribute to be properly performed, this option must be assigned a higher priority option category (e.g. "first") than the option which adds the child unit to the parent. If this is not done, then the child unit's size will appear not to have been adjusted properly.

      Example: A chariot can be purchased extra steeds (csiz:wdchario+2).
  dsab:
    :shortdesc: option disabled by default
    :attr_type: :option_attrs
    :attr_id: dsab
    :syntax: dsab
    :longdesc: |-
      The option with this attribute is initially disabled, being visible to the user but not able to have its state modified in any way. In order for this option to be accessible by the user, it will have to be subsequently enabled. This attribute has no parameters.

      [Single] [ABLite]
  dtyp:
    :shortdesc: delete matching types
    :attr_type: :option_attrs
    :attr_id: dtyp
    :syntax: dtyp:name{-grand}{#race}{#mode}{#legal}
    :longdesc: |-
      If the parent unit is currently tagged as belonging to any unit types matching name, those type tags are deleted. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the parent unit) has all matching types deleted. If "-grand" is specified and the parent is a top-level unit, the attribute is ignored. If the designated unit has no matching type names, then this attribute is ignored. It is not possible to delete the primary type assigned to a unit.

      [Multiple] [ABLite]

      Note: This attribute will not touch the primary type assigned to a unit. It will only effect secondary types that are assigned to the unit at run-time. Attempts to delete the primary type of a unit will be ignored. It is perfectly valid to have a unit with no primary type and only secondary types, so you can use the "type" attribute to assign initial types to a unit that can be deleted at run-time with this attribute.

      Warning: Be very careful with the relative evaluation priorities of your options and items when using this attribute, because a type must already be added to a unit in order for it to be deleted. If this attribute is processed before the type is added to the unit, then this attribute will appear to be not working, while the problem is actually a matter of sequencing and timing.
  elim:
    :shortdesc: eliminate child option
    :attr_type: :option_attrs
    :attr_id: elim
    :syntax: elim:unit-option=[delete|deselect|disable]
    :longdesc: |-
      This attribute works identically to "over", except that it operates on the specified option of a designated child unit. Both the unit and option are specified by their unique id. If either the child unit does not exist or the option does not exist for the unit, this attribute does nothing.

      [Multiple] [ABLite]

      Warning: In order for the effects of this attribute to be properly performed, this option must be assigned a higher priority option category (e.g. "first") than the option which adds the child unit to the parent. If this is not done, then the option within the child unit will not be eliminated properly.

      Example: A chariot has the option for an extra crewman, although that option must be eliminated when the chariot is chosen as the mount for a leader (elim:wdchario-wdxtrcrw=delete).
  enab:
    :shortdesc: enable child option
    :attr_type: :option_attrs
    :attr_id: enab
    :syntax: enab:unit-option
    :longdesc: |-
      Enable the specified option for the indicated child unit, where both are given by their unique id. The specified option is assumed to be hidden (although it is not required), since the objective of this attribute is to make the option visible for selection by the user. If either the child unit does not exist or the option is not linked to the unit, this attribute has no effect. An option that is enabled at run-time via this attribute and subsequently selected by the user will be automatically de-selected if that option is later "un-enabled" at run-time.

      [Multiple] [ABLite]

      Warning: In order for the effects of this attribute to be properly performed, this option must be assigned a higher priority option category (e.g. "first") than the option which adds the child unit to the parent. If this is not done, then the option within the child unit will not to be enabled properly.
  glob:
    :shortdesc: assign to all units
    :attr_type: :option_attrs
    :attr_id: glob
    :syntax: glob:[incl|free|auto|cost]
    :longdesc: |-
      This option is assigned to every single unit in the data files with the specified link nature.

      [Single] [ABLite]
  hide:
    :shortdesc: option hidden by default
    :attr_type: :option_attrs
    :attr_id: hide
    :syntax: hide{:}{#race}{#mode}{#legal}
    :longdesc: |-
      The option with this attribute is not initially made visible to the user for selection. This attribute has no parameters.

      [Single] [ABLite]

      Example: Options which attach the crew to a war machine are implied to the user, so they do not need to be shown and can be hidden with this attribute.

      Example: Options which are only available if another condition is met can be given this attribute and then made visible via the "show" attribute when the proper condition is satisfied.
  ichg:
    :shortdesc: charge special item points
    :attr_type: :option_attrs
    :attr_id: ichg
    :syntax: ichg:cost
    :longdesc: |-
      This attribute charges the specified cost (in points) towards the total number of special item points allowed for the unit. Using this attribute allows the option to be treated as equivalent to a special item, without actually requiring that a special item be involved. If the unit has no limits on special item points, then this attribute is effectively worthless.

      [Single]

      Note: This attribute does not count the points towards the total cost of items for the entire army roster. It only applies the points towards the limits established for the individual unit. If the points must be counted towards the total size for the army roster, then the "take" attribute must be used instead.

      Note: Use of a negative value for the cost essentially increases the number of points the unit can spend on items. This can come in quite handy for certain game systems where certain conditions allow more items to be purchased.

      Warning: This attribute should not be combined with either the "take" or "list" attributes. If you do this, the results are not guaranteed to work correctly.

      Example: Grenades are usually purchased for a unit as a special item, but this unit needs to be able to select them as an option, with the points for the grenades being properly counted towards the special items point limit for the unit (ichg:5).
  inho:
    :shortdesc: inherit attributes
    :attr_type: :option_attrs
    :attr_id: inho
    :syntax: inho:option
    :longdesc: |-
      Inherit all attributes defined for the specified option, treating them all as if specified explicitly for this option.

      [Multiple] [ABLite]
  invs:
    :shortdesc: fine-tune visibility
    :attr_type: :option_attrs
    :attr_id: invs
    :syntax: invs:[noprint|noabbrev|nodisplay]{-unit=unit}
    :longdesc: |-
      Sometimes, the standard behaviors for option visibility just aren't ideal (i.e. presence of an abbreviation), and you need finer control over when an option is/isn't visible to the user. This attribute allows the visibility to be restricted to only certain circumstances. The "noprint" form hides the option within printouts, but otherwise the option is visible to the user. The "noabbrev" form suppresses any abbreviation from being written to the Options column within the roster grid. The "nodisplay" form hides the option entirely from the user within AB, but allows the option to be printed normally (i.e. it also hides any abbreviation).

      This attribute is most useful in situations where option chaining is employed. For example, consider a situation where two options must be selected as a pair (e.g. "Javelin & Shield"). Ideally, you would create a "Javelin" option, a "Shield" option, and a "Javelin & Shield" option. The combo option would chain to the other two options via "more". You could then specify "invs:noprint" on the combo option so that it is only visible to the user interactively, but the other two chained options get displayed and printed out with all the proper details. You could also specify "invs:nodisplay" for the two chained options, resulting in them never appearing to the user interactively BUT properly being printed out in a roster.

      This attribute can also be filtered on a specific unit. You can append the qualifier "-unit=id", where the id is the unique id of a specific unit. With this form, the attribute will ONLY apply to the option if it's parent is the specified unit. Otherwise, the attribute will be ignored. This allows the same option to behave normally for most units, being controlled specially just for the few units that work differently from the norm.

      [Single] [ABLite]
  item:
    :shortdesc: 'adjust # items allowed'
    :attr_type: :option_attrs
    :attr_id: item
    :syntax: item:[+|-]count
    :longdesc: |-
      The number of special items that is allowed to the parent unit is adjusted by the count specified.

      [Multiple] [ABLite]

      Example: Some systems require that an option be purchased for certain units in order to be able to select a special item. So, selecting the option would increase the number of special items allowed from zero to one (item:1).
  legl:
    :shortdesc: restrict mode/race access
    :attr_type: :option_attrs
    :attr_id: legl
    :syntax: legl:{race=name}|{mode[<|=|>|!]name}
    :longdesc: |-
      Obsolete - Please use "lglx" instead.

      When this attribute is attached to a record, the record is only legal when the race with the specified abbreviation is currently the primary race or if the current mode satisfies the constraint specified. Non-legal records are ignored completely by Army Builder.

      [Multiple] [ABLite]

      Note: If a record has even one "legl:race" attribute assigned to it, then it is considered illegal for all races that are not explicitly specified as legal for it (via other instances of this attribute). Similarly, if a record has even one "legl:mode" attribute assigned to it, then it is illegal for all other modes that are not specified as legal. However, a distinction is made between race and mode legality, so a record with only "legl:race" attributes will be legal for all modes, and vice versa.

      Example: A record is only available when creating a tounament army (legl:mode=tournie).
  lglx:
    :shortdesc: restrict mode/race access
    :attr_type: :option_attrs
    :attr_id: lglx
    :syntax: lglx:expr
    :longdesc: |-
      The record is legal (i.e. made available to the user) if the specified boolean expression evaluates to a result of 'true'. Non-legal records are ignored entirely by Army Builder. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against, consisting of one of the following:

          race=xx
          mode=abbrev
          mode<=abbrev
          mode>=abbrev
          time=X
          time<=X
          time>=X

      [Multiple] [ABLite]

      Example: A sample legality test expression might look like "lglx:(((race=el|mode=zzz)^!mode>=yyy)&time<1492)"
  list:
    :shortdesc: option shows list of units
    :attr_type: :option_attrs
    :attr_id: list
    :syntax: list:[race*{=expr}|unit1{,unit2{,...}}]{#race}{#mode}{#legal}
    :longdesc: |-
      When an option with this attribute is selected by the user, a dialog is displayed that lists the set of units that are indicated by the parameter list. When the dialog is presented, the user can either select one of the units or cancel out. If the user cancels out, then the option is considered to be unselected. Otherwise, the unit is selected and added as a child of the parent unit, just as if it was specified via the attribute "unit:name@var". If the option is subsequently de-selected by the user, the associated unit is automatically discarded.

      The parameter list can take one of two valid forms. In the first form, "race*{=type}", the race must be the two-character prefix of the race to be displayed, and all units from that race will be listed in the dialog. If the race specified is a shared race, then the race restrictions are properly enforced when filtering the list of units to be shown.

      Optionally, a type expression can be specified which will restrict the list of units that are displayed to include only those units that match the expression. The syntax of this type expression is similar to that used by "utyp" or "itst", wherein a boolean expression of type values is evaluated over all candidate units to determine which ones to include in the list. Only types that are assigned directly to candidate units are considered during evaluation.

      It is also possible to specify a race prefix of "xx". When this is done, all units from all races are processed for inclusion into the list presented to the user. The specified type restriction must still be satisfied by each unit, as must any race restrictions, but all races are included in the list. When the race prefix is given as "xx" and non-native units are shown in the list, those units have their race prefix appended to identify their origin.

      The second form of the parameter list, "unit1{,unit2{,...}}", allows you to specify an explicit set of units in a comma-separated list, each given by its unique id. In this case, only the specified units are included in the displayed list.

      [Single] [ABLite]

      Warning: This attribute should not be combined with either the "take" or "ichg" attributes. If you do this, the results are not guaranteed to work correctly.

      Warning: Use of complex type expressions in conjunction with the "xx" race prefix can be extremely expensive to compute. Use care when combining these two mechanisms, else Army Builder will appear to lag for users on slower computers.

      Example: Assigning a leader a monster as a mount uses this mechanism (list:mn*=ride).
  modl:
    :shortdesc: adjust unit size
    :attr_type: :option_attrs
    :attr_id: modl
    :syntax: modl:value
    :longdesc: |-
      When an option with this attribute is selected, the model count of the unit is immediately adjusted by the value specified (plus OR minus). The adjustment is instantaneous and is triggered only once. Once the adjustment is made, the user is free to adjust the model count in whatever way he wants, possibly overriding the adjustment just made. When the option is deselected, the adjustment is reversed. At no time will the adjustment allow the model count to go outside the normal size constraints imposed for the unit. This option is useful for providing the illusion to the user that a model in the unit has been "promoted" to a new status as a child unit, but it is of limited use otherwise.

      [Single] [ABLite]
  more:
    :shortdesc: chain to another option
    :attr_type: :option_attrs
    :attr_id: more
    :syntax: more:option=[free|cost|incl|auto]{#race}{#mode}{#legal}
    :longdesc: |-
      The specified option, given by its unique id, is automatically chained into the set of options for the parent unit. This newly linked option is assigned the link nature indicated, with the standard effects of the option being applied.

      [Multiple] [ABLite]

      Note: When an option is chained via this attribute, the option category assigned to that option is ignored for prioritization. When chained, an option is always processed during the processing of the option it is chained to, being processed immediately after the option to which is it attached. If you chain multiple options, all options are processed in the order of their attributes.

      Warning: There are a number of other attributes that rely upon options not being created and destroyed dynamically at run-time, which is what this attribute does. As a result, you may not experience the desired behavior if you use this attribute in complex situations. If this occurs, it is recommended that you use the "slct" attribute instead.

      Warning: When this attribute is used, new options are synthesized on the fly by Army Builder to allow the user to select the specified unit. Consequently, there is no longer any link to the original option that this attribute is defined for. There is no run-time control over the synthesized options, so you cannot make use of attributes like "over", "enab", or "elim" in conjunction with this functionality.

      Warning: Options that are chained via this attribute are immune to preclusion due to conflict group handling. Consider a scenario where there is a "Wep" conflict group. OptionA belongs to no conflict group, OptionB belongs to "Wep", and OptionC also belongs to "Wep". OptionA uses the "more" attribute to chain to OptionB. Both OptionA and OptionC are assigned to a unit via the "cost" link nature. If OptionA is selected, OptionC will be disabled due to conflict group handling, because OptionA chains to OptionB, and OptionB belongs to the same conflict group as OptionC. However, if OptionC is selected by the user, OptionA is NOT disabled, because only OptionA is compared against OptionC for conflict group handling. This is an important behavior to be aware of, since this behavior may not be otherwise expected.
  name:
    :shortdesc: override option name
    :attr_type: :option_attrs
    :attr_id: name
    :syntax: name:"name"{#race}{#mode}{#legal}
    :longdesc: |-
      Override the name of the option with the new name specified within double quotes. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  note:
    :shortdesc: append/override notes
    :attr_type: :option_attrs
    :attr_id: note
    :syntax: note:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard notes field of the record. This data will appear within the standard notes for the record, just as if the notes were part of the defined notes. The "-clear" qualifier causes all previously accrued notes for the record to be discarded. The text specified by the attribute becomes the first text that is displayed for the record.

      [Multiple] [ABLite]
  olgl:
    :shortdesc: restrict unit access
    :attr_type: :option_attrs
    :attr_id: olgl
    :syntax: olgl:expr
    :longdesc: |-
      This attribute controls whether an option is legal for use in the roster, just like the 'lglx' attribute. The key difference is that this attribute is specific to options and their relationships to a parent unit. The legality of an option can be controlled based on the characteristics of the parent unit that it will be attached to. The option is valid for the unit if the specified boolean expression results in a value of 'true'. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify a condition to be satisfied, with the supported terms being:
      "unit=id" - parent unit must be the one specified
      "race=xx" - parent unit must belong to race 'xx'
      "native" - parent unit must belong to its native race
      "type=xxx" - parent unit must be assigned type X as an intrinsic type (i.e. assigned directly to the unit - not via an option or other means)

      [Multiple] [ABLite]

      Note: If multiple 'olgl' attributes are specified for an option, they are AND'd together. In other words, if ANY one of the 'olgl' attributes fails (i.e. evaluates to false), then the option is considered valid and made available to the unit.

      Note: This attribute is a complement to 'lglx'. If both 'lglx' attributes AND 'olgl' attributes are specified for an option, ALL of the attributes must generate a legal result for the option to be considered legal. The intent is that this attribute represents a further refinement test that is specific to options.

      Note: This attribute is quite handy in conjunction with 'glob' and 'clon', since you can attach an option for the general case and use this attribute to restrict it for the few exceptions that apply.

      Example: A sample expression might look like "olgl:(((race=qw|native)^!type=foo)&unit=elhero)"
  onam:
    :shortdesc: override option name
    :attr_type: :option_attrs
    :attr_id: onam
    :syntax: onam:[+|=]"text"{#legal}
    :longdesc: This attribute allows the option name to be changed dynamically at run-time when it is selected by the user. When selected, the text of the option is changed to reflect some facet of the selection back to the user. For example, the option can be named "Add Weapon" when unselected and changed to simply "Weapon" once it is selected. The name of the option can either be appended to ('+') or completely replaced ('=') with the new string specified.
  over:
    :shortdesc: override option selection
    :attr_type: :option_attrs
    :attr_id: over
    :syntax: over:option=[delete|deselect|disable|enable]
    :longdesc: |-
      This attribute effects the specified peer option, given by its unique id. The peer option must also be a child of the same parent unit as the option that contains this attribute. If the option does not exist, this attribute does nothing. The specified option is overridden in one of four ways:
         disable - The option is made non-changeable to the user, remaining in its current selection state.
         deselect - The option is de-selected and made non-changeable to the user.
         delete - The option is de-selected and physically removed from the list of options shown to the user.
         enable - The option is made changeable to the user (assuming it was initially disabled).

      [Multiple] [ABLite]

      Example: A unit with the options "normal bow" and "longbow upgrade" will always begin with the "normal bow" option included for free. When the "longbow upgrade" option is selected, the "normal bow" option must be de-selected, since it has been replaced (over:normbow=deselect).
  preq:
    :shortdesc: parent unit requirements
    :attr_type: :option_attrs
    :attr_id: preq
    :syntax: preq:[yes|no]
    :longdesc: |-
      The option with this attribute will only be available to a unit that itself either has a parent unit (yes) or does not have a parent unit (no). If a parent unit is required and the unit is not a child unit (i.e. it is a top-level unit), then this option is eliminated from access. Conversely, if a parent unit is required to not be present and one does exist, the unit will also be eliminated.

      [Single] [ABLite]
  prng:
    :shortdesc: override parent size range
    :attr_type: :option_attrs
    :attr_id: prng
    :syntax: prng:{min=x}{max=y}
    :longdesc: |-
      This attribute overrides the default minimum and/or maximum size for the parent unit, setting the new minimum to be x (if specified) and the new maximum to y (if given).

      [Single]

      Example: Unit A normally requires a minimum of 5 models, but that minimum drops to 1 model when a special option is selected for it (prng:min=1).

      Warning: It is critical that only one instance of this attribute ever appear for a single parent regiment.
  prnt:
    :shortdesc: adjust parent stat value
    :attr_type: :option_attrs
    :attr_id: prnt
    :syntax: prnt:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}{-base}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that it affects the unit that is the parent of the option's parent unit, working upward through the hierarchy by an extra level. If the '-base' qualifier is specified, then the adjustment is applied to the base value of the stat and not the adjusted value (behaving like the "base" attribute instead of the "stat" attribute). If the parent unit does not have a parent itself, then this attribute has no effect.

      [Multiple] [ABLite]

      Example: Option A decreases the Save of the rider (prnt:Sv-1).
  rang:
    :shortdesc: specify selection range
    :attr_type: :option_attrs
    :attr_id: rang
    :syntax: rang:min-max{-start=start}{[-step=x|-incr=x]}{-unit=unit}
    :longdesc: |-
      This option is not a standard option that is either selected or not. Instead, this option can be selected multiple times. The valid range that can be specified for the option must be given via its minimum (min) and maximum (max) values. Optionally, a starting value (start) can be specified, defaulting to the minimum value if not provided.

      If the "-unit" qualifier is specified, the range only applies to the given unit. The attribute can be specified multiple times so that separate ranges can be given for different units. If no unit is specified, then that range is used as the default for any unit that doesn't have a specific range given. If no default is given and no range attribute is specified for a given unit, the option behaves as a normal (i.e. non-range) option.

      It is also possible to specify an arbitrary adjustment interval for the attribute. Either a "-step" qualifier or an "-incr" qualifier can be used. Both of these qualifiers specify 'x' as the adjustment to increase the option value whenever the user clicks the '+' or '-' buttons. However, these qualifiers behave differently from each other in their other effects, so it is important to understand their different usage. The "incr" qualifier is used when you want to increment the selection by 'x' each time, just as if the user had clicked the button x times. For example, using "-incr=4" would increment the option by 4 with each click. The cost charged for the option will be increased by 4 times the option cost, and all other adjustments triggered by the option (such as stat adjustments) are applied 4 times for each increment. In contrast, the "step" qualifier provides a visual adjustment of +x, yet the internal effects are only applied once for each click of the '+' or '-' button. For example, using "-step=4" would increase the value shown for the option by 4 with each click, but the cost would only be increased a single time, and all other adjustments associated by the optoin (like stat adjustments) would only be applied ONCE for each click. The "step" qualifier is ideal for game systems where equipment is purchased in "lots" of a fixed size, such as ammunition. For example, if the ammo for a weapon were purchased in cases of 12 shots each, at a price of 7 points per case, the "step" qualifier could be used to show the total number of shots purchased, while still keeping the price calculation correct (use "-step=12" with an option cost of 7 points).

      When you use either the "incr" or "step" qualifier, there are some VERY important constraints and possible side-effects to be aware of. First of all, the overall range of values (i.e. from minimum to maximum) MUST be an integral multiplier of the interval specified. If the range is NOT an integral multiplier, it is automatically increased to the next higher multiplier. This means that an attribute of "rang:0-13-step=4" would automatically get modified to become "rang:0-16-step=4", since 16 is the next higher integral multiplier of 4 that is above 13. The same holds true for any "-start" qualifier that is specified. The starting value MUST be a proper value within the range that would normally be selected if the range began at the minimum. If the attribute "rang:0-16-step=4-start=3" were specified, the starting value would automatically be adjusted to a value of 4. If you don't take care to get your values correct, Army Builder will correct them for you. However, automatic correction may not always do exactly what you WANT to have happen, so specify your ranges correctly for yourself.

      When this option is encountered in roster output, the option name will be followed by an indication of the quantity selected (e.g. "Weapon (x3)").

      [Multiple] [ABLite]

      Note: When this attribute is used in conjunction with conflict groups, the current selection count for the option is used as the count towards any conflict resolution. For example, if the range is defined as 1-4, then the option will count as 1-4 instances towards the maximum allowed for the conflict group. If the conflict group is defined to allow a maximum of 3 instances, then the option will be disabled to the user as soon as the count is increased to 3 (i.e. the value of 4 will never be available due to the conflict group limit).

      Warning: Many other option attributes will not operate correctly if associated with an option that also uses this attribute. In general, this attribute should be used only with basic option attributes like stat adjustment, although it can also be used with the "cost:single" attribute. Use in conjunction with other attributes is not guaranteed to work and may cause unpredictable results.

      Example: Units can possess from 3-10 instances of an option (rang:3-10).
  rept:
    :shortdesc: add unit repeatedly
    :attr_type: :option_attrs
    :attr_id: rept
    :syntax: rept:unit{@max}
    :longdesc: |-
      This attribute initiates the ability for the user to add a repeated sequence of a specified unit, adding each unit one at a time. The unit is given by its unique id, and the maximum number of times the unit can be added is optionally given by max. If no value is provided for max, the default is that an unlimited number of units can be added. If the value of max is greater than 1, each added unit is renamed with a unique index that identifies it. Whenever a unit is added, a new option is created with the name of the unit and its unique index, allowing the user to de-select the unit and remove it from the list. When this attribute is used, the points for the option are ignored, and the cost of each child unit is accumulated using the unit's cost (including any options possessed by the child unit).

      [Multiple] [ABLite]

      Note: While there is no practical limit to for this attribute, there is in fact a true limit of 32 repetitions. If no value is specified for max, then a limit of 32 is assumed. If a limit greater than 32 is specified, the limit is reset to 32.

      Warning: This attribute should only be employed as an attribute of an included, hidden option.

      Warning: When this attribute is used, new options are synthesized on the fly by Army Builder to allow the user to select the specified unit. Consequently, there is no longer any link to the original option that this attribute is defined for. There is no run-time control over the synthesized options, so you cannot make use of attributes like "over", "enab", or "elim" in conjunction with this functionality.

      Example: The unit Slayer can be added up to 3 times as a child unit (rept:Slayer@3).
  rsiz:
    :shortdesc: restricted by roster size
    :attr_type: :option_attrs
    :attr_id: rsiz
    :syntax: rsiz:[min|max]=size{#legal}
    :longdesc: |-
      Control whether an option is enabled or not based on the entire roster size. This attribute works exactly like "usiz", except that the roster size is used instead of the unit size (see that option for more details).

      [Single]

      Warning: Do NOT use this attribute on an option with a non-zero cost that is assigned to an option via the 'auto' link nature. If you do this, it will be possible that Army Builder will not handle this correctly. For example, consider the attribute "rsiz:max=1000" on an option with a cost of 10 that is attached as "auto" to a unit of cost 50. If this unit is added to a roster of 945 points, the total roster size goes to 1005 points. This causes the attribute to be declared invalid by Army Builder, so the option is disabled. Disabling the option causes the total roster to drop to 995 points, at which point the option should again be valid. This causes the cost to go back up and the option to become invalid. The net result is an infinite loop. Army Builder is not able to handle this problem cleanly, so simply do NOT use this attribute on a non-zero cost option with the 'auto' link nature.

      Warning: This attribute only operates in conjunction with fixed size rosters. If a roster is of unlimited size, the roster size is ignored. Instead, the attribute is considered to be non-compliant and the option is disabled if a maximum limit is given. If a minimum limit is given, the attribute is considered compliant and the option is enabled.
  same:
    :shortdesc: treat option like another
    :attr_type: :option_attrs
    :attr_id: same
    :syntax: same:option
    :longdesc: |-
      Obsolete - Use the mapping feature of the local unit attribute "only" instead.

      For the purposes of inheriting option availability (see the local unit attribute "auto"), the option with this attribute is considered to be the same as the specified option, which is given by its unique id. A given option can only ever have a single equivalent option.

      [Multiple] [ABLite]
  show:
    :shortdesc: show specified option
    :attr_type: :option_attrs
    :attr_id: show
    :syntax: show:option
    :longdesc: |-
      The specified peer option, given by its unique id, is made visible to the user (assuming it was hidden). If the option does not exist or the option is already visible, then this attribute has no effect.

      [Multiple] [ABLite]
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :option_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  slct:
    :shortdesc: select option using nature
    :attr_type: :option_attrs
    :attr_id: slct
    :syntax: slct:option=[incl|auto]
    :longdesc: |-
      The specified option, given by its unique id, is automatically selected for the parent unit, being assigned the indicated link nature. This new nature temporarily overrides the original link nature of the option, regardless of what it was. For this attribute to work, the specified option must already be linked to the parent unit; otherwise, this attribute will have no effect. This attribute is only applicable when associated with an option that can be selected by the user (i.e. with a nature of "cost" or "free"), since the option would already be selected (and this attribute a waste of time) if the nature is already "incl" or "auto".

      [Multiple] [ABLite]

      Warning: If you use this attribute to select an option that also includes a repeated unit attribute (rept), bizarre results might occur within Army Builder, so do not use these two attributes in combination.
  spec:
    :shortdesc: allow item category
    :attr_type: :option_attrs
    :attr_id: spec
    :syntax: spec:[+|-]category{#race}{#mode}{#legal}
    :longdesc: |-
      The specified special item category, given by its abbreviation, is either made available to the parent unit ('+') or expressly forbidden to the parent unit ('-').

      [Multiple] [ABLite]
  stat:
    :shortdesc: adjust stat value
    :attr_type: :option_attrs
    :attr_id: stat
    :syntax: stat:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute modifies the value of the specified stat within the parent unit. The attribute is adjusted in one of five ways, as described below:
         '+' - The stat is increased by the given value
         '-' - The stat is decreased by the given value
         '=' - The stat is set equal to the given value, regardless of its current value
         '*' - The stat is multiplied by the given value
         '/' - The stat is divided by the given value (division by zero yeilds 9999999)
      If an expression is given, it must be enclosed within parentheses. Expression syntax allows up to 4 terms, each of which can specify a literal value, a stat reference, '#' for the model count, or '%' for the item count. If a stat reference is encountered, the current adjusted value for the stat is utilized when the expression is evaluated. The operators supported are '+', '-', '*', '/', '^', and '@'. Optional rounding and clipping can be performed upon the stat as part of the adjustment.

      [Multiple] [ABLite]

      Note: Expressions are evaluated on a purely left-to-right basis, with standard operator precedence NOT being observed. This means that the expression "2+3*4" will result in a value of 20 instead of the standard 14, since it will be evaluated as "(2+3)*4".Example: Option A increases the number of Attacks by 1 (stat:At+1).

      Example: Option B decreases the Save by 1 (stat:Sv-1).

      Example: A complex expression to adjust a stat might look like "stat:sp-(mv+cc/at+1)"
  stxt:
    :shortdesc: modify text stat value
    :attr_type: :option_attrs
    :attr_id: stxt
    :syntax: stxt:name[+|=|<]"value"
    :longdesc: |-
      The stat value with the given name is appended with ('+'), prepended with ('<'), or replaced by ('=') the text value given within double-quotes.

      [Multiple]

      Example: The damage of a special weapon increases normal damage by "1D6" (stxt:dam+"1D6").
  tabl:
    :shortdesc: table-based set of options
    :attr_type: :option_attrs
    :attr_id: tabl
    :syntax: tabl:value0=option0{,value1=option1{...}}{-noname}{-nobrackets}
    :longdesc: |-
      The option with this attribute is quite special. The option is treated as a table of valid settings, with each possible setting being selectable by the user. The primary use for this attribute is to model an option whose value can span a range of values, yet the option has varying effects at each value and/or has a varying cost for each value. The presentation of these settings is done similarly to the "rang" attribute, where a '+' and '-' button are shown at the left edge of the option, with the value for the setting and the option name shown to the right.

      Each entry in the table is defined as an abbreviation that is shown to the user and an option that is triggered for the parent unit when the table entry is selected by the user. Syntactically, each table entry in the list is separated by a comma, with each entry consisting of two components: the value that is displayed and the option that is chained to as the effects of the selection. The value can be up to 20 alphanumeric characters in length, while the option is specified by its unique id. The link nature of the chained option is always "cost". This allows all of the selection and cost handling to be dealt with entirely within the chained option. It also allows a chained option to be used separately for other purposes if desired. The actual cost of the table-based option is determined by which table entry is selected. The cost of the option is computed as the normal cost of the option that is currently chained to (which is selected by the user).

      The display of the table to the user within the Options Panel can be controlled in a few ways. Normally, the table name is displayed and the name of the currently selected table entry is shown to the left with angled brackets around it. Specifying the "-noname" qualifier suppresses the display of the table option name, leaving only the name of the currently selected entry. Specifying the "-nobrackets" qualifier suppresses the angle brackets around the selected entry name.

      [Single] [ABLite]

      Note: The maximum number of entries that can be defined for a given table is 50.

      Note: There is no "unselected" state for an option with this attribute. If this attribute is active (i.e. it can be disabled via the normal mechanisms), then the "unselected" state of the option is as if the first entry in the table is selected. If you want there to be an "unselected" state for the option, then you must include an initial table entry which chain to an option that does nothing.

      Note: The chained options for a table are handled specially, so they are NOT processed during normal conflict resolution. As such, any table-based options which chain to options that would normally conflict with other options (e.g. weapon options) will not conflict. The use of the "tabl" attribute is primarily designed for the adjustment of stats and attributes of the unit, where conflicts are not usually a factor.

      Note: It is valid to utilize attributes like "over" and "enab" within the chained options of a table. Their behavior will be normal when the particular table entry is selected. However, it is not possible to use these attributes within normal options of a unit to override other options that are actually chained to from within a table.

      Note: Table-based options as a whole can be deleted and enabled via other options using the standard attributes for this purpose. When this occurs, the entire table is either active or not. Disabling a table merely disables the ability to change the current selection within the table. As with normal options, the current selection within the table is still active and its effects are applied normally. Deleting the table-based option results in the table being completely suppressed.

      Warning: When the "tabl" attribute is used, the only attributes which may be used in conjunction with it on the same option are: "usiz", "utyp", and "legl". If any other attributes are used with "tabl", the results are undefined and you will likely get incorrect results (and, in extreme conditions, possibly a program crash).

      Example: The option has 4 valid values that can be chosen, from level 1 through level 4. Each level selected increases the Str stat of the parent unit by +1. The cost for each level of stat increase goes up progressively in the sequence: 1, 3, 6, 10. Therefore, increasing Str by +1 costs 1 point, increasing Str by +2 costs 3 points, increasing Str by +3 costs 6 points, etc. Assuming that the options "StrUpX" are defined to increase the parent's Str by +X and that each of these options reflects the proper point cost, this behavior would be modeled with the attribute: (tabl:Lv1=StrUp1,Lv2=StrUp2,Lv3=StrUp3,Lv4=StrUp4).

      Example: The option has 3 valid settings that can be chosen, each resulting in a different effect. The first setting increases the Dam of the parent unit by +1. The second setting increases Str +1 and Dam +1. The third setting increases Str +1 and Dam +2. Assuming the options are implemented to perform these stated adjustments and are assigned the proper costs, this behavior would be modeled with the attribute: (tabl:Up1=Dam1,Up2=Str1Dam1,Up3=Str1Dam2)

      Example: The option has 2 valid settings, the first adding +1 to Str for 5 points and the second adding +2 to Str for 15 points. It is also possible to select neither setting, so an extra table entry must be inserted at the start to accommodate this situation. Assuming the options are defined properly to trigger the effects and are assigned the proper costs, the corresponding attribute would look like this: (tabl:St0=nothing,St1=StrUp1,St2=StrUp2)
  take:
    :shortdesc: take a special item
    :attr_type: :option_attrs
    :attr_id: take
    :syntax: take:item{#race}{#mode}{#legal}
    :longdesc: |-
      Selection of this option adds the special item (given by its unique id) to the parent unit. If there is conflict in taking the specified item, then the option will not be selected for the unit. When an item is added to a unit via an option, it cannot be deleted normally by the user. The only way to delete the item from the unit is to deselect the option which adds it. To indicate that an item has been added via an option, a '#' character is prepended to the name of the item.

      [Multiple] [ABLite]

      Note: Remember that, in order for a unit to be assigned any special items, it must belong to a race and therefore cannot have a unique id that begins with an 'x'.

      Note: The "-free" qualifier syntax is still recognized for this form of the "take" attribute, although its presence is completely ignored at run-time. If you include the "-free" qualifier with this attribute, Army Builder will accept it, but the item will still be charged normally.

      Warning: This attribute should not be combined with either the "ichg" or "list" attributes. If you do this, the results are not guaranteed to work correctly.
  tcst:
    :shortdesc: override displayed cost
    :attr_type: :option_attrs
    :attr_id: tcst
    :syntax: tcst:"text"
    :longdesc: |-
      Override the cost that is displayed to the user prior to selection of this object. Instead of the normal numeric cost value, the specified text value is displayed. This is extremely useful for situations where the cost is calculated and not a fixed value (e.g. the cost is calculated based on stat values and/or percentages). Once something is added to the roster in any way, its properly calculated cost is always displayed within the roster. This attribute ONLY applies to the cost displayed to the user PRIOR to selection. This attribute overrides the displayed cost when the user right-clicks in the Options Panel.

      [Single]
  type:
    :shortdesc: assign unit type
    :attr_type: :option_attrs
    :attr_id: type
    :syntax: type:name{-[grand|child]}{-nodups}{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is tagged as belonging to the unit type given by name, in addition to any other type names that the unit has already been assigned. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the unit) is assigned the type. If "-grand" is specified and this is a top-level unit, the attribute is ignored. If the "-child" qualifier is used, all child units are assigned the type, but not the current unit. If the "-nodups" qualifier is specified, the new type will not be assigned to the unit if that type already is assigned one or more times. A maximum of 40 extra type names can be assigned to any one regiment at a time, with additional types being simply ignored.

      [Multiple] [ABLite]

      Note: Use of the "-nodups" qualifier may conflict with the use of other functionality within Army Builder, such as the "cost" attribute with the "typecount" form. Use this qualifier judiciously.

      Example: All flying models must be designated with the type "flier", including the riders of flying mounts. Each flying model would be assigned (type:flier) and each flying mount would also be assigned (type:flier-grand).
  uatt:
    :shortdesc: restrict by attachment
    :attr_type: :option_attrs
    :attr_id: uatt
    :syntax: uatt:[alone|attach]
    :longdesc: |-
      This option is only valid if parent unit is or is not properly attached to another unit. If the "alone" form is selected, the parent unit must not be attached to another unit for the option to be valid. If the "attach" form is used, the parent unit must be attached to another unit for the option to appear.

      [Single] [ABLite]

      Example: The option is only available for selection for its parent unit when the parent unit has not been attached to another unit (uatt:alone).
  ucmp:
    :shortdesc: restrict by composition group
    :attr_type: :option_attrs
    :attr_id: ucmp
    :syntax: ucmp:group1{,group2,...}
    :longdesc: |-
      In order for this option to be valid for this unit, the unit must belong to one of the composition groups specified. A comma-separated list of composition group abbreviations must be given.

      [Multiple] [ABLite]

      Example: The option is only valid for Heroes or Lords (ucmp:hero,lord).
  ucst:
    :shortdesc: unit cost multiplier
    :attr_type: :option_attrs
    :attr_id: ucst
    :syntax: ucst:{all|base|stat@stat|flat}{*x}
    :longdesc: |-
      This attribute causes the parent unit's cost to be multiplied by the value given in x (which defaults to 1). The "all" form causes the parent unit's entire cost, including special items, to be multiplied by x, after all other options are calculated into it. The "base" form is similar to "all", except that only the unit's base cost is multiplied, with all options and items being calculated at normal cost. The "stat" form requires a stat abbreviation to be given, with the unit cost being increased by a percentage equal to the current stat value times x. The "flat" form increases the unit cost by a flat percentage equal to x. Both the "stat" and "flat" forms are cumulative (not compounded), so multiple "ucst" attributes are added up and then a single multiplier is applied to the unit cost. If there is an ally cost multiplier that applies to the unit, then the "stat" and "flat" values are added into the ally cost multiplier, forming a single total multiplier.

      [Multiple] [ABLite]

      Warning: When the "stat" form is used, the stat value upon which the cost computation is based is the ADJUSTED value for the stat.

      Example: When the option is selected, the unit cost is half of what it otherwise would be (ucst:all*.5).

      Example: The option increases the total unit cost by 10% (ucst:flat*10).

      Example: The option increases the total unit cost by 3% for each increment of the Str stat for the unit (ucst:stat@str*3).
  uexp:
    :shortdesc: restricted by stat expression
    :attr_type: :option_attrs
    :attr_id: uexp
    :syntax: uexp:expr
    :longdesc: |-
      The specified expression must be satisfied in order for this option to be enabled for the unit. The expression is a standard boolean expression that conforms to the syntax rules outlined in the Manual. Each individual term of the expression is a comparison between two values, where each value is either a stat abbreviation or a literal value. The syntax of each comparison term is "[stat|value][<|<=|=|>=|>][stat|value]". The current adjusted value of each stat is always used in the comparison. Since there is no duplicated syntax between the terms and boolean expressions, there is no need to place each comparison within parentheses, although it might make the attribute more readable.

      [Multiple] [ABLite]

      Warning: The conditional test is performed within the standard sequence of option evaluation. If an option changes the value of a stat AFTER the conditional test is performed, that change is NOT factored into the comparison. This is good and bad, since it can allow for intermediate stat values to tested, but it can also lead to confusing debugging situations if you aren't careful about your option sequencing.

      Example: The option is only valid when Atk is greater than 5 and Def is less than 4 ("uexp:(Atk>5)&(Def<4)").
  unam:
    :shortdesc: modify unit name
    :attr_type: :option_attrs
    :attr_id: unam
    :syntax: unam:[+|=|<]"text"
    :longdesc: |-
      The name of the parent unit is modified by this attribute. Either the unit name has the specified text appended ('+'), prepended ('<'), or replaced ('=') with the new text. The text must be placed within double quotes to allow spaces to be embedded.

      [Multiple] [ABLite]

      Example: The option appends the text " (Aligned)" to the parent unit (unam:+" (Aligned)").
  unit:
    :shortdesc: unit is attached as child
    :attr_type: :option_attrs
    :attr_id: unit
    :syntax: unit:name@[per=x|abs=y|var]
    :longdesc: |-
      The unit with the specified name, given by its unique id, is added as a child to the parent unit. The child unit has a relationship with the parent unit that can take one of three different forms:
         per - The child unit has a fixed ratio where x models of the child appear for each model of the parent.
         abs - The child unit has an absolute number of models in it, given by y.
         var - The child unit has a variable size that is not controlled by the parent unit.

      If the cost of the option containing this attribute is non-zero, then that cost is used for the child unit, regardless of the number of models in the child unit. However, if the cost of the option is zero and the option is not linked to its parent as "free" or "incl", the unit cost for the child unit is computed normally and added to the cost for the parent.

      [Multiple] [ABLite]

      Example: War machine A has a crew of two, which is attached to the parent unit via an option that is included for free (unit:xdkcrew@per=2).

      Example: Unit B has an option for a unit leader. There can be only one leader, regardless of the size of the unit (unit:leader@abs=1).

      Example: Unit C has an option for an attached unit D, where the number of models in Unit D is independent of the number of models in Unit C (unit:unitd@var).
  usiz:
    :shortdesc: restricted by unit size
    :attr_type: :option_attrs
    :attr_id: usiz
    :syntax: usiz:[min|max]=size{-eff}
    :longdesc: |-
      The number of models in the parent unit must be either at least (min) or at most (max) the specified size in order for this option to be valid for the unit. If the unit size is modified to be non-compliant with the specified range, the option is automatically deselected and hidden from view. By default, the unit size is the number of models within the parent regiment only, excluding any children. However, by specifying the "-eff" qualifier, the size will include all children who possess the "coun" attribute, thereby using the effective unit size.

      [Multiple] [ABLite]

      Warning: If you use the "-eff" qualifier with this attribute, and it is used to govern the inclusion of a unit that possesses the "coun" attribute itself, the results are unpredictable and could result in a program crash. Bottom line is: don't mix the two.

      Example: In order for Unit A to be given a Champion model, it must consist of at least 2 normal models (usiz:min=2).
  usta:
    :shortdesc: restrict by stat value
    :attr_type: :option_attrs
    :attr_id: usta
    :syntax: usta:stat[<|<=|=|>=|>]expr
    :longdesc: |-
      This option is only enabled for the parent unit if the specified stat comparison expression is satisfied. The indicated stat must maintain the stipulated relationship with the evaluated result of the given expression. The expression can contain up to 4 terms and may also contain references to the model count and item count of the unit.

      [Multiple] [ABLite]

      Warning: The conditional test is performed within the standard sequence of option evaluation. If an option changes the value of a stat AFTER the conditional test is performed, that change is NOT factored into the comparison. This is good and bad, since it can allow for intermediate stat values to tested, but it can also lead to confusing debugging situations if you aren't careful about your option sequencing.

      Example: The option is only valid when the rank stat exceeds the combined total of three other stats (usta:rank>foo+bar+baz).
  utyp:
    :shortdesc: only show for unit type
    :attr_type: :option_attrs
    :attr_id: utyp
    :syntax: utyp:expr
    :longdesc: |-
      The option with this attribute is restricted to only be shown for units satisfying the boolean expression. The expression can contain multiple type names, combined by boolean operators. The operators AND ('&'), OR ('|'), XOR ('^'), and NOT ('!') can be used, as well as parentheses. Each type value can contain wildcards. All type names assigned to the unit are included when evaluating the expression. However, only types that are assigned to the unit via higher priority options or special items will be considered valid.

      [Multiple] [ABLite]

      Example: A complex comparison expression might look like "utyp:!(for^bar)&zap"
  vwst:
    :shortdesc: display stat in options panel
    :attr_type: :option_attrs
    :attr_id: vwst
    :syntax: vwst:stat{-align=[left|center|right|farleft]}{-prefix="text"}{-suffix="text"}{-output}
    :longdesc: |-
      An option with this attribute will display a specified stat value in the Options Panel. This is usually used to display a stat value that would otherwise not normally be visible to the user, such as a stat that only is needed under certain circumstances or a stat that just won't fit in the normal roster display region. The stat value can have arbitrary text specified as a prefix and/or as a suffix. The final text can also be aligned in the options column as desired (left, center, right, or far left). The stat is displayed with no selection characteristics (i.e. no checkbox) and always uses the enabled choice text color. The stat value is displayed among other options according to standard option sequencing rules, although the stat value shown is always the fully adjusted value after all options are applied to the unit. Unlike normal options, this option will ONLY appear within the Options Panel and will NOT appear anywhere else (e.g. it won't appear in roster printouts). If you need the stat to be displayed within roster output, specify the '-output' qualifier. When included in roster output, this option will always appear FIRST (i.e. before any other unit or option notes). If you have multiple options with 'vwst' on a unit, they will appear in their respective rendering order.

      [Single] [ABLite]

      Note: If you want to display the option in the disabled (greyed) text color, assign a 'dsab' attribute to the option.

      Warning: This attribute MUST be attached to a unit via an "incl" or "auto" link nature. If either "cost" or "free" is used, the option name will appear instead.

      Warning: Use of this attribute completely overrides any "onam" attributes on the same option - they are ignored.

      Example: Display the "Fly" movement stat for a unit centered in the options panel ("vwst:fly-align=center-prefix="Fly Move: "").
  xcmp:
    :shortdesc: assign composition group
    :attr_type: :option_attrs
    :attr_id: xcmp
    :syntax: xcmp:group
    :longdesc: |-
      The unit to which this option is attached is assigned to the newly designated composition group, given by its defined abbreviation. The inherently defined composition group for the unit is ignored, and all points for the unit are assigned to the new group.

      Warning: If a "-race", "-mode", or "-legal" qualifier is specified for this attribute (per the legal syntax for "xcmp" as a unit option), the qualifiers will be accepted as valid syntax, but they will be ignored and not acted upon.

      [Single] [ABLite]
  xcon:
    :shortdesc: override conflict group
    :attr_type: :option_attrs
    :attr_id: xcon
    :syntax: xcon:[none|grp{,grp...}]{-unit=id}{#legal}
    :longdesc: |-
      This attribute overrides the set of conflict groups to which this option is assigned. A series of one or more comma-separated conflict groups is specified, and the option behaves as if those groups were assigned instead of the standard groups for option. Alternately, the literal string "none" can be specified instead of a series of conflict groups to indicate that no conflict groups should apply. The effects of the attribute can be constrained to only apply to a single unit and/or only under the conditions of a standard legality test. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple]

      Note: Unlike the mutual exclusivity of the constraints supported by 'xcst', both the unit constraint AND the legal expression can be used together for this attribute.

      Example: Change the option to be classified as armor and shield for unit AA ("xcon:arm,shd-unit=AA").
  xcst:
    :shortdesc: override cost
    :attr_type: :option_attrs
    :attr_id: xcst
    :syntax: xcst:cost{-unit=unit}{-parrace=race}{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute will override the price of the option. The cost override can be restricted in one of three different ways. It may be restricted to a specific parent unit, given by its unique id. It may be restricted to the race assigned to the parent unit, given by the two-letter prefix (e.g. the cost override applies only when the race of the parent unit is XX). Lastly, it can be restricted by the user-selected race and/or mode in the standard way. Each of these three methods is mutually exclusive, so attempts to combine any of these methods will fail to work. Unit-based and parent race-based cost restrictions always take precedence over standard race/mode restrictions. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  xlat:
    :shortdesc: translate stat value
    :attr_type: :option_attrs
    :attr_id: xlat
    :syntax: xlat:from=stat1-to=stat2-map:x1{-y1}=z1{,x2{-y2}=z2}...{-base}
    :longdesc: |-
      Translate the current value for stat1 into a new value that is assigned to stat2. The translation uses the specified mapping table to determine the new value. The mapping is a comma-separated list of the value mappings to be processed. Each mapping entry consists of a value range "X?Y", where the "?Y" is optional, followed by an equal sign '=' and the resulting value to be used. The mapping list can specify ranges of values for each entry in the lookup table, and it is perfectly legal for the ranges to overlap each other. The lookup is performed sequentially, so whichever range is first satisfied is used. If no range matches, then the output stat is left unchanged. If the '-base' qualifier is specified, then the adjustment is applied to the base value of the stat and not the adjusted value (behaving like the "base" attribute instead of the "stat" attribute).

      [Single] [ABLite]
      Example: A sample translate attribute might look like "xlat:from=st-to=wo-map:0-4=8,4-6=7,6-8=6,9=5"
:item_attrs:
  asop:
    :shortdesc: display as an option
    :attr_type: :item_attrs
    :attr_id: asop
    :syntax: asop
    :longdesc: |-
      The item will be rendered as an option for all roster output. When this occurs, the name and notes for the item are appended to the notes for the unit, just like an option is handled, instead of appearing on their own line.

      [Single]
  base:
    :shortdesc: adjust bearer's base stat
    :attr_type: :item_attrs
    :attr_id: base
    :syntax: base:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that is modifies the base value of the stat that is displayed (i.e. the value that appears on the left side of any slash).

      [Multiple] [ABLite]
  bcst:
    :shortdesc: bound cost of item
    :attr_type: :item_attrs
    :attr_id: bcst
    :syntax: bcst:{min=x}{-}{max=y}
    :longdesc: |-
      This attribute bounds the total cost for the item to a specified minimum and/or maximum value. The '-' separator is required if both a minimum and maximum are given. The cost is bounded BEFORE any multipliers are applied for the regiment, such as would be dictated by the "mult" attribute, as that would be a cost introduced externally to the unit itself.

      [Single] [ABLite]
  bttl:
    :shortdesc: raw text append to stat
    :attr_type: :item_attrs
    :attr_id: bttl
    :syntax: bttl:stat+"text"
    :longdesc: |-
      This attribute appends the specified text to the identified stat, just like the "stxt" attribute. The key difference is that this attribute performs a raw append BEFORE any "stxt" attributes are processed for the parent unit. A full description of this attribute can be found in the entry for option attributes.

      [Multiple]
  catg:
    :shortdesc: assign unit type
    :attr_type: :item_attrs
    :attr_id: catg
    :syntax: catg:category
    :longdesc: |-
      The parent unit is considered to now belong to the specified unit category, given by its abbreviation.

      [Multiple] [ABLite]
  comm:
    :shortdesc: append/override comments
    :attr_type: :item_attrs
    :attr_id: comm
    :syntax: comm:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard comments field of the record. This data will appear within the standard comments for the record, just as if the comments were part of the defined comments. The "-clear" qualifier causes all previously accrued comments for the record to be discarded. The text specified by the attribute becomes the first comments text that is displayed for the record.

      [Multiple] [ABLite]
  dtwk:
    :shortdesc: tweak selected by default
    :attr_type: :item_attrs
    :attr_id: dtwk
    :syntax: dtwk:tweak
    :longdesc: |-
      The specified tweak, given by its unique id, is selected as its initial default state. If the tweak does not exist or the tweak possesses an "auto" or "incl" nature, then this attribute has no effect.

      [Multiple] [ABLite]

      Example: Unit A can take a tweak at no cost, so there is no reason to require that the user always select the tweak. Instead, the tweak is selected by default, allowing the user to de-select it if desired.
  dtyp:
    :shortdesc: delete matching types
    :attr_type: :item_attrs
    :attr_id: dtyp
    :syntax: dtyp:name{-grand}{#race}{#mode}{#legal}
    :longdesc: |-
      If the parent unit is currently tagged as belonging to any unit types matching name, those type tags are deleted. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the parent unit) has all matching types deleted. If "-grand" is specified and the parent is a top-level unit, the attribute is ignored. If the designated unit has no matching type names, then this attribute is ignored. It is not possible to delete the primary type assigned to a unit.

      [Multiple] [ABLite]

      Note: This attribute will not touch the primary type assigned to a unit. It will only effect secondary types that are assigned to the unit at run-time. Attempts to delete the primary type of a unit will be ignored. It is perfectly valid to have a unit with no primary type and only secondary types, so you can use the "type" attribute to assign initial types to a unit that can be deleted at run-time with this attribute.

      Warning: Be very careful with the relative evaluation priorities of your options and items when using this attribute, because a type must already be added to a unit in order for it to be deleted. If this attribute is processed before the type is added to the unit, then this attribute will appear to be not working, while the problem is actually a matter of sequencing and timing.
  elem:
    :shortdesc: auto-include an element
    :attr_type: :item_attrs
    :attr_id: elem
    :syntax: elem:element{*count}
    :longdesc: |-
      The item with this attribute automatically includes the specified element on the item, where the element is given by its unique id. An optional count may specified, indicating the number of times the element appears on the item. If no count is given, a count of 1 is assumed. The point cost for the element is automatically added to the item's cost, so an item that consists solely of explicitly added elements is likely to be specified as having a cost of 0 (since the cost of the elements is added in on top of the base item cost). The comments and notes for the element are appended to the notes for the item, so you might also not need any notes for the item itself (if the item consists solely of explicit elements).

      [Multiple] [ABLite]
  icnt:
    :shortdesc: 'max # of item per unit'
    :attr_type: :item_attrs
    :attr_id: icnt
    :syntax: icnt:count
    :longdesc: |-
      Items with this attribute are restricted to only be selectable by a maximum of count times by a single unit.

      [Single]

      Example: The item can be selected only once for each unit that takes it (icnt:1).
  imax:
    :shortdesc: 'max # of item in army'
    :attr_type: :item_attrs
    :attr_id: imax
    :syntax: imax:count
    :longdesc: |-
      Obsolete - Use the corresponding field of the item record instead.

      A grand total of count instances of the special item may exist within any given army. If this attribute is not specified, then a count of 1 is assumed for all items.

      [Single]
  inhi:
    :shortdesc: inherit attributes
    :attr_type: :item_attrs
    :attr_id: inhi
    :syntax: inhi:item
    :longdesc: |-
      Inherit all attributes defined for the specified item, treating them all as if specified explicitly for this item.

      [Multiple] [ABLite]
  ipri:
    :shortdesc: control rendering sequence
    :attr_type: :item_attrs
    :attr_id: ipri
    :syntax: ipri:priority
    :longdesc: |-
      Assign a rendering priority to the item, controlling the sequence in which this item is processed. By default, all items have a rendering priority of zero. This attribute allows the priority of an item to be explicitly assigned, specifying whether this item is evaluated before or after other items. When Army Builder processes a unit, items are evaluated from smallest priority value to the largest, with negative values having highest priority. Controlling the priority ensures that the attributes and tweaks associated with one item are always processed before a different item with a lower priority. The evaluation order is completely independent from the order in which the items are specified by the user within the Special Items dialog. However, the order in which the items are displayed within the main roster grid and within printouts directly reflects the evaluation order. When rendering the items for a unit, all items of the same priority are left in the order specified by the user.

      [Single] [ABLite]

      Note: Since priority assignments dictate the rendering order for items, users can sequence items one way within the Special Item dialog and have Army Builder display them within the roster in a completely different order (due to the priorities). This can easily cause confusion for the user, potentially appearing to be a bug within Army Builder. Due to this behavior, it is strongly recommended that priorities should NOT be assigned to items that are visible and which the user can re-sequence. In general, only hidden items should be assigned priorities to avoid problems (although this is not required). If you do need to use priorities on visible items, please keep it to a minimum and document the non-standard behavior within the FAQ for the data files.
  irac:
    :shortdesc: restrict unit by race
    :attr_type: :item_attrs
    :attr_id: irac
    :syntax: irac:[+|-]race
    :longdesc: |-
      Obsolete - Please use "itst" instead.

      The item is designated as valid ('+') or invalid ('-') for all units belonging to the specified race, given by the two-letter race abbreviation.

      [Multiple] [ABLite]
  ireg:
    :shortdesc: restrict unit by regiment
    :attr_type: :item_attrs
    :attr_id: ireg
    :syntax: ireg:[+|-]unit
    :longdesc: |-
      Obsolete - Please use "itst" instead.

      The item is designated as valid ('+') or invalid ('-') for the specified unit, given by its unique id.

      [Multiple] [ABLite]
  irng:
    :shortdesc: item count is adjustable
    :attr_type: :item_attrs
    :attr_id: irng
    :syntax: irng:min-max{-start=start}
    :longdesc: |-
      This attribute allows the item to be selected in multiples, which is valuable for games where a spellbook or deck of cards must be constructed as part of the army. The item is desigated to have the indicated minimum size and maximum size, with an optional starting size also being assignable. If no starting size is given, the starting size is assumed to the be the minimum size.

      Please note that this mechanism is intended to be light weight. It is NOT intended for complex uses. As such, the entire item is treated as an atomic entity by Army Builder, being edited in its singular form. Once the item has been fully rendered and processed, its cost is simply multiplied by the user-selected count. This means that types and tweaks (and all other mechanism) used by the item are only processed ONCE, regardless of the number of times the item is technically included. The only other constraints that the item count is used for are the maximum number of times that the item may appear in the roster and the total number of items allocated to the unit.

      [Single] [ABLite]
  itst:
    :shortdesc: complex unit restriction
    :attr_type: :item_attrs
    :attr_id: itst
    :syntax: itst:expr
    :longdesc: |-
      The item is valid for the unit if the specified boolean expression results in a value of 'true'. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against ("race=xx", "categ=abbr", "type=name", or "reg=id").

      [Multiple]

      Note: If multiple "itst" attributes are specified for an item, they are OR'd together. In other words, if ANY one of the "itst" attributes is valid, then the item is considered valid and made available to the unit. These is no way to forcibly designate an item as invalid for a unit via a single "itst" attribute if other such attributes exist. This is done so that backwards compatability is maintained with older data files that relied on this behavior.

      Example: A sample comparison expression might look like "itst:(((race=el|categ=her)^!type=foo)&reg=elhero)"
  ityp:
    :shortdesc: restrict unit by type
    :attr_type: :item_attrs
    :attr_id: ityp
    :syntax: ityp:[+|-]type
    :longdesc: |-
      Obsolete - Please use "itst" instead.

      The item is designated as valid ('+') or invalid ('-') for all units that are assigned to the specified type. This type value may contain wildcards.

      [Multiple] [ABLite]
  legl:
    :shortdesc: restrict mode/race access
    :attr_type: :item_attrs
    :attr_id: legl
    :syntax: legl:{race=race}|{mode[<|=|>|!]mode}{#legal}
    :longdesc: |-
      Obsolete - Please use "lglx" instead.

      When this attribute is attached to a record, the record is only legal when the race with the specified abbreviation is currently the primary race or if the current mode satisfies the constraint specified. Non-legal records are ignored completely by Army Builder.

      [Multiple] [ABLite]

      Note: If a record has even one "legl:race" attribute assigned to it, then it is considered illegal for all races that are not explicitly specified as legal for it (via other instances of this attribute). Similarly, if a record has even one "legl:mode" attribute assigned to it, then it is illegal for all other modes that are not specified as legal. However, a distinction is made between race and mode legality, so a record with only "legl:race" attributes will be legal for all modes, and vice versa.

      Example: A record is only available when creating a tounament army (legl:mode=tournie).
  lglx:
    :shortdesc: restrict mode/race access
    :attr_type: :item_attrs
    :attr_id: lglx
    :syntax: lglx:expr
    :longdesc: |-
      The record is legal (i.e. made available to the user) if the specified boolean expression evaluates to a result of 'true'. Non-legal records are ignored entirely by Army Builder. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against, consisting of one of the following:

          race=xx
          mode=abbrev
          mode<=abbrev
          mode>=abbrev
          time=X
          time<=X
          time>=X

      [Multiple] [ABLite]

      Example: A sample legality test expression might look like "lglx:(((race=el|mode=zzz)^!mode>=yyy)&time<1492)"
  name:
    :shortdesc: override item name
    :attr_type: :item_attrs
    :attr_id: name
    :syntax: name:"name"{#race}{#mode}{#legal}
    :longdesc: |-
      Override the name of the item with the new name specified within double quotes. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  note:
    :shortdesc: append/override notes
    :attr_type: :item_attrs
    :attr_id: note
    :syntax: note:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard notes field of the record. This data will appear within the standard notes for the record, just as if the notes were part of the defined notes. The "-clear" qualifier causes all previously accrued notes for the record to be discarded. The text specified by the attribute becomes the first text that is displayed for the record.

      [Multiple] [ABLite]
  prnt:
    :shortdesc: adjust parent's stat value
    :attr_type: :item_attrs
    :attr_id: prnt
    :syntax: prnt:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}{-base}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that it affects the unit that is the parent of the item's parent unit, working upward through the hierarchy by a level. If the '-base' qualifier is specified, then the adjustment is applied to the base value of the stat and not the adjusted value (behaving like the "base" attribute instead of the "stat" attribute). If the parent unit does not have a parent itself, then this attribute has no effect.

      [Multiple] [ABLite]
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :item_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  spec:
    :shortdesc: allow item category
    :attr_type: :item_attrs
    :attr_id: spec
    :syntax: spec:[+|-]category{#race}{#mode}{#legal}
    :longdesc: |-
      The specified special item category, given by its abbreviation, is either made available to the unit ('+') or expressly forbidden to the unit ('-').

      [Multiple] [ABLite]
  stat:
    :shortdesc: adjust bearer's stat value
    :attr_type: :item_attrs
    :attr_id: stat
    :syntax: stat:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute modifies the value of the specified stat within the parent unit. The attribute is adjusted in one of five ways, as described below:
         '+' - The stat is increased by the given value
         '-' - The stat is decreased by the given value
         '=' - The stat is set equal to the given value, regardless of its current value
         '*' - The stat is multiplied by the given value
         '/' - The stat is divided by the given value (division by zero yeilds 9999999)
      If an expression is given, it must be enclosed within parentheses. Expression syntax allows up to 4 terms, each of which can specify a literal value, a stat reference, '#' for the model count, or '%' for the item count. If a stat reference is encountered, the current adjusted value for the stat is utilized when the expression is evaluated. The operators supported are '+', '-', '*', '/', '^', and '@'. Optional rounding and clipping can be performed upon the stat as part of the adjustment.

      [Multiple] [ABLite]

      Note: Expressions are evaluated on a purely left-to-right basis, with standard operator precedence NOT being observed. This means that the expression "2+3*4" will result in a value of 20 instead of the standard 14, since it will be evaluated as "(2+3)*4".Example: Option A increases the number of Attacks by 1 (stat:At+1).

      Example: Option B decreases the Save by 1 (stat:Sv-1).

      Example: A complex expression to adjust a stat might look like "stat:sp-(mv+cc/at+1)"
  stxt:
    :shortdesc: modify text stat value
    :attr_type: :item_attrs
    :attr_id: stxt
    :syntax: stxt:name[+|=|<]"value"
    :longdesc: |-
      The stat value with the given name is appended with ('+'), prepended with ('<'), or replaced by ('=') the text value given within double-quotes.

      [Multiple] [ABLite]

      Example: The damage of a special weapon increases normal damage by "1D6" (stxt:dam+"1D6").
  tcst:
    :shortdesc: override displayed cost
    :attr_type: :item_attrs
    :attr_id: tcst
    :syntax: tcst:"text"
    :longdesc: |-
      Override the cost that is displayed to the user prior to selection of this object. Instead of the normal numeric cost value, the specified text value is displayed. This is extremely useful for situations where the cost is calculated and not a fixed value (e.g. the cost is calculated based on stat values and/or percentages). Once something is added to the roster in any way, its properly calculated cost is always displayed within the roster. This attribute ONLY applies to the cost displayed to the user PRIOR to selection. This attribute overrides the cost displayed for the object within the Special Items dialog.

      [Single]
  type:
    :shortdesc: assign unit type
    :attr_type: :item_attrs
    :attr_id: type
    :syntax: type:name{-[grand|child]}{-nodups}{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is tagged as belonging to the unit type given by name, in addition to any other type names that the unit has already been assigned. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the unit) is assigned the type. If "-grand" is specified and this is a top-level unit, the attribute is ignored. If the "-child" qualifier is used, all child units are assigned the type, but not the current unit. If the "-nodups" qualifier is specified, the new type will not be assigned to the unit if that type already is assigned one or more times. A maximum of 40 extra type names can be assigned to any one regiment at a time, with additional types being simply ignored.

      [Multiple] [ABLite]

      Note: Use of the "-nodups" qualifier may conflict with the use of other functionality within Army Builder, such as the "cost" attribute with the "typecount" form. Use this qualifier judiciously.
  uadd:
    :shortdesc: attach unit via item
    :attr_type: :item_attrs
    :attr_id: uadd
    :syntax: uadd:unit@x
    :longdesc: |-
      The specified unit, given by its unique id, is added to the roster as a child of this item. The number of models in the new unit is given by x.

      [Single] [ABLite]

      Warning: Units added via this attribute are NOT treated normally within Army Builder. Such units are handled specially, and some of the standard unit and/or option functionality will NOT propogate to other units. Specifically, the use of any attributes on the unit (either directly or via options) that have scope beyond that one unit (e.g. "prnt" to modify the parent unit's stats) is undefined. Under certain conditions, such attributes are even dangerous and can result in a program crash, so please avoid their use.
  user:
    :shortdesc: user-defined extra cost
    :attr_type: :item_attrs
    :attr_id: user
    :syntax: user:"text"-range=min-max
    :longdesc: |-
      An item with this attribute must have a user-supplied adjustment added to its cost. This adjustment must be in the range between min and max, which must both be positive values. The text is appended to the item's base cost to show the proper cost range for the item. When the item is initially assigned to a unit, the minimum is assumed. The user can then modify the cost on the Special Items screen within Army Builder.

      [Single] [ABLite]
  xcst:
    :shortdesc: override cost
    :attr_type: :item_attrs
    :attr_id: xcst
    :syntax: xcst:cost{-unit=unit}{-parrace=race}{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute will override the price of the item. The cost override can be restricted in one of three different ways. It may be restricted to a specific parent unit, given by its unique id. It may be restricted to the race assigned to the parent unit, given by the two-letter prefix (e.g. the cost override applies only when the race of the parent unit is XX). Lastly, it can be restricted by the user-selected race and/or mode in the standard way. Each of these three methods is mutually exclusive, so attempts to combine any of these methods will fail to work. Unit-based and parent race-based cost restrictions always take precedence over standard race/mode restrictions. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  xtot:
    :shortdesc: item not counted in total
    :attr_type: :item_attrs
    :attr_id: xtot
    :syntax: xtot
    :longdesc: |-
      When assigned to an item, this attribute causes the item to be excluded from the calculated total number of items in the roster. This is useful for items that are attached by options and don't really count towards item limits as far as the user is concerned (i.e. they are really just options that need to be tweaked). Typically, hidden item categories are better suited for this purpose, but this attribute can also be used. The attribute has no parameters.

      [Single]
  zcln:
    :shortdesc: 'clone all tweaks of '
    :attr_type: :item_attrs
    :attr_id: zcln
    :syntax: zcln:item
    :longdesc: |-
      Clone all of the tweaks that exist for the specified item, establishing equivalent links to the same tweaks from this item. If a particular tweak is already assigned to this unit, then it is ignored during cloning.

      [Multiple] [ABLite]
:element_attrs:
  base:
    :shortdesc: adjust bearer's base stat
    :attr_type: :element_attrs
    :attr_id: base
    :syntax: base:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that it modifies the base value of the stat that is displayed (i.e. the value that appears on the left side of any slash).

      [Multiple] [ABLite]
  bttl:
    :shortdesc: raw text append to stat
    :attr_type: :element_attrs
    :attr_id: bttl
    :syntax: bttl:stat+"text"
    :longdesc: |-
      This attribute appends the specified text to the identified stat, just like the "stxt" attribute. The key difference is that this attribute performs a raw append BEFORE any "stxt" attributes are processed for the parent unit. A full description of this attribute can be found in the entry for option attributes.

      [Multiple]
  dtyp:
    :shortdesc: delete matching types
    :attr_type: :element_attrs
    :attr_id: dtyp
    :syntax: dtyp:name{-grand}{#race}{#mode}{#legal}
    :longdesc: |-
      If the parent unit is currently tagged as belonging to any unit types matching name, those type tags are deleted. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the parent unit) has all matching types deleted. If "-grand" is specified and the parent is a top-level unit, the attribute is ignored. If the designated unit has no matching type names, then this attribute is ignored. It is not possible to delete the primary type assigned to a unit.

      [Multiple] [ABLite]

      Note: This attribute will not touch the primary type assigned to a unit. It will only effect secondary types that are assigned to the unit at run-time. Attempts to delete the primary type of a unit will be ignored. It is perfectly valid to have a unit with no primary type and only secondary types, so you can use the "type" attribute to assign initial types to a unit that can be deleted at run-time with this attribute.

      Warning: Be very careful with the relative evaluation priorities of your options and items when using this attribute, because a type must already be added to a unit in order for it to be deleted. If this attribute is processed before the type is added to the unit, then this attribute will appear to be not working, while the problem is actually a matter of sequencing and timing.
  dupl:
    :shortdesc: duplicate freely
    :attr_type: :element_attrs
    :attr_id: dupl
    :syntax: dupl
    :longdesc: |-
      The element with this attribute can be duplicated freely on items, being exempt from the uniqueness rule. This attribute has no parameters.

      [Single]
  irac:
    :shortdesc: restrict unit by race
    :attr_type: :element_attrs
    :attr_id: irac
    :syntax: irac:[+|-]race
    :longdesc: |-
      The element is designated as valid ('+') or invalid ('-') for all units belonging to the specified race, given by the two-letter race abbreviation.

      [Multiple] [ABLite]
  ireg:
    :shortdesc: restrict unit by regiment
    :attr_type: :element_attrs
    :attr_id: ireg
    :syntax: ireg:[+|-]unit
    :longdesc: |-
      The element is designated as valid ('+') or invalid ('-') for the specified unit, given by its unique id.

      [Multiple] [ABLite]
  itst:
    :shortdesc: complex unit restriction
    :attr_type: :element_attrs
    :attr_id: itst
    :syntax: itst:expr
    :longdesc: |-
      The element is valid for the unit if the specified boolean expression results in a value of 'true'. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against ("race=xx", "categ=abbr", "type=name", or "reg=id").

      [Multiple]

      Note: If multiple "itst" attributes are specified for an element, they are OR'd together. In other words, if ANY one of the "itst" attributes is valid, then the element is considered valid and made available to the unit. These is no way to forcibly designate an element as invalid for a unit via a single "itst" attribute if other such attributes exist. This is done so that backwards compatability is maintained with older data files that relied on this behavior.

      Example: A sample comparison expression might look like "itst:(((race=el|categ=her)^!type=foo)&reg=elhero)"
  ityp:
    :shortdesc: restrict unit by type
    :attr_type: :element_attrs
    :attr_id: ityp
    :syntax: ityp:[+|-]type
    :longdesc: |-
      The element is designated as valid ('+') or invalid ('-') for all units that are assigned to the specified type. This type value may contain wildcards.

      [Multiple] [ABLite]
  legl:
    :shortdesc: restrict mode/race access
    :attr_type: :element_attrs
    :attr_id: legl
    :syntax: legl:{race=race}|{mode[<|=|>|!]mode}{#legal}
    :longdesc: |-
      Obsolete - Please use "lglx" instead.

      When this attribute is attached to a record, the record is only legal when the race with the specified abbreviation is currently the primary race or if the current mode satisfies the constraint specified. Non-legal records are ignored completely by Army Builder.

      [Multiple] [ABLite]

      Note: If a record has even one "legl:race" attribute assigned to it, then it is considered illegal for all races that are not explicitly specified as legal for it (via other instances of this attribute). Similarly, if a record has even one "legl:mode" attribute assigned to it, then it is illegal for all other modes that are not specified as legal. However, a distinction is made between race and mode legality, so a record with only "legl:race" attributes will be legal for all modes, and vice versa.

      Example: A record is only available when creating a tounament army (legl:mode=tournie).
  lglx:
    :shortdesc: restrict mode/race access
    :attr_type: :element_attrs
    :attr_id: lglx
    :syntax: lglx:expr
    :longdesc: |-
      The record is legal (i.e. made available to the user) if the specified boolean expression evaluates to a result of 'true'. Non-legal records are ignored entirely by Army Builder. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against, consisting of one of the following:

          race=xx
          mode=abbrev
          mode<=abbrev
          mode>=abbrev
          time=X
          time<=X
          time>=X

      [Multiple] [ABLite]

      Example: A sample legality test expression might look like "lglx:(((race=el|mode=zzz)^!mode>=yyy)&time<1492)"
  name:
    :shortdesc: override element name
    :attr_type: :element_attrs
    :attr_id: name
    :syntax: name:"name"{#race}{#mode}{#legal}
    :longdesc: |-
      Override the name of the element with the new name specified within double quotes. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  prnt:
    :shortdesc: adjust parent's stat value
    :attr_type: :element_attrs
    :attr_id: prnt
    :syntax: prnt:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}{-base}
    :longdesc: |-
      This attribute works identically to the "stat" attribute, except that it affects the unit that is the parent of the item's parent unit, working upward through the hierarchy by a level. If the '-base' qualifier is specified, then the adjustment is applied to the base value of the stat and not the adjusted value (behaving like the "base" attribute instead of the "stat" attribute). If the parent unit does not have a parent itself, then this attribute has no effect.

      [Multiple] [ABLite]
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :element_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  solo:
    :shortdesc: cannot be combined
    :attr_type: :element_attrs
    :attr_id: solo
    :syntax: solo
    :longdesc: |-
      The element with this attribute cannot be combined on the same item with any other element that has this attribute. This attribute has no parameters.

      [Single]
  stat:
    :shortdesc: adjust bearer's stat value
    :attr_type: :element_attrs
    :attr_id: stat
    :syntax: stat:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute modifies the value of the specified stat within the parent unit. The attribute is adjusted in one of five ways, as described below:
         '+' - The stat is increased by the given value
         '-' - The stat is decreased by the given value
         '=' - The stat is set equal to the given value, regardless of its current value
         '*' - The stat is multiplied by the given value
         '/' - The stat is divided by the given value (division by zero yeilds 9999999)
      If an expression is given, it must be enclosed within parentheses. Expression syntax allows up to 4 terms, each of which can specify a literal value, a stat reference, '#' for the model count, or '%' for the item count. If a stat reference is encountered, the current adjusted value for the stat is utilized when the expression is evaluated. The operators supported are '+', '-', '*', '/', '^', and '@'. Optional rounding and clipping can be performed upon the stat as part of the adjustment.

      [Multiple] [ABLite]

      Note: Expressions are evaluated on a purely left-to-right basis, with standard operator precedence NOT being observed. This means that the expression "2+3*4" will result in a value of 20 instead of the standard 14, since it will be evaluated as "(2+3)*4".Example: Option A increases the number of Attacks by 1 (stat:At+1).

      Example: Option B decreases the Save by 1 (stat:Sv-1).

      Example: A complex expression to adjust a stat might look like "stat:sp-(mv+cc/at+1)"
  stxt:
    :shortdesc: modify text stat value
    :attr_type: :element_attrs
    :attr_id: stxt
    :syntax: stxt:name[+|=|<]"value"
    :longdesc: |-
      The stat value with the given name is appended with ('+'), prepended with ('<'), or replaced by ('=') the text value given within double-quotes.

      [Multiple]

      Example: The damage of a special weapon increases normal damage by "1D6" (stxt:dam+"1D6").
  tcst:
    :shortdesc: override displayed cost
    :attr_type: :element_attrs
    :attr_id: tcst
    :syntax: tcst:"text"
    :longdesc: |-
      Override the cost that is displayed to the user prior to selection of this object. Instead of the normal numeric cost value, the specified text value is displayed. This is extremely useful for situations where the cost is calculated and not a fixed value (e.g. the cost is calculated based on stat values and/or percentages). Once something is added to the roster in any way, its properly calculated cost is always displayed within the roster. This attribute ONLY applies to the cost displayed to the user PRIOR to selection. This attribute overrides the cost displayed for the object within the Special Items dialog.

      [Single]
  type:
    :shortdesc: assign unit type
    :attr_type: :element_attrs
    :attr_id: type
    :syntax: type:name{-[grand|child]}{-nodups}{#race}{#mode}{#legal}
    :longdesc: |-
      The unit is tagged as belonging to the unit type given by name, in addition to any other type names that the unit has already been assigned. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the unit) is assigned the type. If "-grand" is specified and this is a top-level unit, the attribute is ignored. If the "-child" qualifier is used, all child units are assigned the type, but not the current unit. If the "-nodups" qualifier is specified, the new type will not be assigned to the unit if that type already is assigned one or more times. A maximum of 40 extra type names can be assigned to any one regiment at a time, with additional types being simply ignored.

      [Multiple] [ABLite]

      Note: Use of the "-nodups" qualifier may conflict with the use of other functionality within Army Builder, such as the "cost" attribute with the "typecount" form. Use this qualifier judiciously.
  xcat:
    :shortdesc: extra item category
    :attr_type: :element_attrs
    :attr_id: xcat
    :syntax: xcat:category
    :longdesc: |-
      The element is added to the specified special item category, given by its abbreviation. This element is now considered to belong to more than one special item category, so it will appear for selection within multiple categories.

      [Multiple] [ABLite]
  xcst:
    :shortdesc: override cost
    :attr_type: :element_attrs
    :attr_id: xcst
    :syntax: xcst:cost{-unit=unit}{-parrace=race}{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute will override the price of the element. The cost override can be restricted in one of three different ways. It may be restricted to a specific parent unit, given by its unique id. It may be restricted to the race assigned to the parent unit, given by the two-letter prefix (e.g. the cost override applies only when the race of the parent unit is XX). Lastly, it can be restricted by the user-selected race and/or mode in the standard way. Each of these three methods is mutually exclusive, so attempts to combine any of these methods will fail to work. Unit-based and parent race-based cost restrictions always take precedence over standard race/mode restrictions. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
:tweak_attrs:
  comm:
    :shortdesc: append/override comments
    :attr_type: :tweak_attrs
    :attr_id: comm
    :syntax: comm:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard comments field of the record. This data will appear within the standard comments for the record, just as if the comments were part of the defined comments. The "-clear" qualifier causes all previously accrued comments for the record to be discarded. The text specified by the attribute becomes the first comments text that is displayed for the record.

      [Multiple] [ABLite]
  inht:
    :shortdesc: inherit attributes
    :attr_type: :tweak_attrs
    :attr_id: inht
    :syntax: inht:tweak
    :longdesc: |-
      Inherit all attributes defined for the specified tweak, treating them all as if specified explicitly for this tweak.

      [Multiple] [ABLite]
  invs:
    :shortdesc: fine-tune visibility
    :attr_type: :tweak_attrs
    :attr_id: invs
    :syntax: invs:[noprint|noabbrev|nodisplay]
    :longdesc: |-
      Sometimes, the standard behaviors for tweak visibility just aren't ideal (i.e. presence of an abbreviation), and you need finer control over when a tweak is/isn't visible to the user. This attribute allows the visibility to be restricted to only certain circumstances. The "noprint" form hides the tweak within printouts, but otherwise the tweak is visible to the user. The "noabbrev" form suppresses any abbreviation from being written to the Options column within the roster grid. The "nodisplay" form hides the tweak entirely from the user within AB, but allows the tweak to be printed normally (i.e. it also hides any abbreviation).

      This attribute is most useful in situations where tweak chaining is employed. See the description of the attribute under options for a detailed example.

      [Single] [ABLite]
  legl:
    :shortdesc: restrict mode/race access
    :attr_type: :tweak_attrs
    :attr_id: legl
    :syntax: legl:{race=name}|{mode[<|=|>|!]name}
    :longdesc: |-
      Obsolete - Please use "lglx" instead.

      When this attribute is attached to a record, the record is only legal when the race with the specified abbreviation is currently the primary race or if the current mode satisfies the constraint specified. Non-legal records are ignored completely by Army Builder.

      [Multiple] [ABLite]

      Note: If a record has even one "legl:race" attribute assigned to it, then it is considered illegal for all races that are not explicitly specified as legal for it (via other instances of this attribute). Similarly, if a record has even one "legl:mode" attribute assigned to it, then it is illegal for all other modes that are not specified as legal. However, a distinction is made between race and mode legality, so a record with only "legl:race" attributes will be legal for all modes, and vice versa.

      Example: A record is only available when creating a tounament army (legl:mode=tournie).
  lglx:
    :shortdesc: restrict mode/race access
    :attr_type: :tweak_attrs
    :attr_id: lglx
    :syntax: lglx:expr
    :longdesc: |-
      The record is legal (i.e. made available to the user) if the specified boolean expression evaluates to a result of 'true'. Non-legal records are ignored entirely by Army Builder. The expression can use AND ('&'), OR ('|'), XOR ('^'), NOT ('!'), and parentheses. Each term must specify the nature to compare and the value to compare against, consisting of one of the following:

          race=xx
          mode=abbrev
          mode<=abbrev
          mode>=abbrev
          time=X
          time<=X
          time>=X

      [Multiple] [ABLite]

      Example: A sample legality test expression might look like "lglx:(((race=el|mode=zzz)^!mode>=yyy)&time<1492)"
  name:
    :shortdesc: override tweak name
    :attr_type: :tweak_attrs
    :attr_id: name
    :syntax: name:"name"{#race}{#mode}{#legal}
    :longdesc: |-
      Override the name of the tweak with the new name specified within double quotes. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  note:
    :shortdesc: append/override notes
    :attr_type: :tweak_attrs
    :attr_id: note
    :syntax: note:"text"{-clear}{#legal}
    :longdesc: |-
      Append the specified text to the standard notes field of the record. This data will appear within the standard notes for the record, just as if the notes were part of the defined notes. The "-clear" qualifier causes all previously accrued notes for the record to be discarded. The text specified by the attribute becomes the first text that is displayed for the record.

      [Multiple] [ABLite]
  skip:
    :shortdesc: ignored by Army Builder
    :attr_type: :tweak_attrs
    :attr_id: skip
    :syntax: skip{anything}
    :longdesc: |-
      This attribute will be ignored by Army Builder. This attribute is ideal for commenting out other attributes during development and testing to allow experimentation with actually deleting attributes from the files.

      [Multiple] [ABLite]
  tcst:
    :shortdesc: override displayed cost
    :attr_type: :tweak_attrs
    :attr_id: tcst
    :syntax: tcst:"text"
    :longdesc: |-
      Override the cost that is displayed to the user prior to selection of this object. Instead of the normal numeric cost value, the specified text value is displayed. This is extremely useful for situations where the cost is calculated and not a fixed value (e.g. the cost is calculated based on stat values and/or percentages). Once something is added to the roster in any way, its properly calculated cost is always displayed within the roster. This attribute ONLY applies to the cost displayed to the user PRIOR to selection. This attribute overrides the displayed cost when the user right-clicks in the Options Panel.

      [Single]
  xcst:
    :shortdesc: override cost
    :attr_type: :tweak_attrs
    :attr_id: xcst
    :syntax: xcst:cost{-unit=unit}{-parrace=race}{#race}{#mode}{#legal}
    :longdesc: |-
      This attribute will override the price of the tweak. The cost override can be restricted in one of three different ways. It may be restricted to a specific parent unit, given by its unique id. It may be restricted to the race assigned to the parent unit, given by the two-letter prefix (e.g. the cost override applies only when the race of the parent unit is XX). Lastly, it can be restricted by the user-selected race and/or mode in the standard way. Each of these three methods is mutually exclusive, so attempts to combine any of these methods will fail to work. Unit-based and parent race-based cost restrictions always take precedence over standard race/mode restrictions. There really is no point to this attribute unless some form of restriction is employed, although it can be used without restriction.

      [Multiple] [ABLite]
  zamd:
    :shortdesc: amend comments text
    :attr_type: :tweak_attrs
    :attr_id: zamd
    :syntax: zamd:[<|>]text
    :longdesc: |-
      Amends the comments text for the item by either prepending ('<') or appending ('>') the specified string to the existing text. This amendment only applies to the text that is displayed within the main roster within Army Builder (i.e. the comments text).

      [Multiple] [ABLite]
  zbas:
    :shortdesc: adjust base stat value
    :attr_type: :tweak_attrs
    :attr_id: zbas
    :syntax: zbas:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute works identically to the "zsta" attribute, except that is modifies the base value of the stat that is displayed (i.e. the value that appears on the left side of any slash).

      [Multiple] [ABLite]
  zcst:
    :shortdesc: cost is special
    :attr_type: :tweak_attrs
    :attr_id: zcst
    :syntax: zcst:[single|pct=value|expr=expr]
    :longdesc: |-
      The cost of this tweak is computed specially. The "single" form applies the defined cost of the tweak once to the total for the item. If the item is range-based and included multiple times by the user, the cost of the tweak is only applied a single time, regardless of the number of count selected by the user. The "pct" form allows a percentage adjustment to the final item cost to be specified. All of the percentage adjustments are accrued for an item, with the final net adjustment being applied to the item's cost. The "expr" form defines the cost as an arithmetic expression that can reference other stat values, with the expression syntax identical to "zsta".

      [Single] [ABLite]

      Note: The "zcst:expr" form can be combined with the "zcst:single" attribute on the same tweak to yield a calculated expression cost as a single cost for the item.

      Note: If the "expr" form is used, any attempt to utilize the item count within the expression will result in a value of 0 being used for the number of items, regardless of how many items are actually present.

      Example: zcst:expr=st*2
  zdsb:
    :shortdesc: tweak disabled by default
    :attr_type: :tweak_attrs
    :attr_id: zdsb
    :syntax: zdsb
    :longdesc: |-
      The tweak with this attribute is initially disabled, being visible to the user but not able to have its state modified in any way. In order for this tweak to be accessible by the user, it will have to be subsequently enabled. This attribute has no parameters.

      [Single] [ABLite]
  zdtp:
    :shortdesc: delete matching types
    :attr_type: :tweak_attrs
    :attr_id: zdtp
    :syntax: zdtp:name{-grand}{#race}{#mode}{#legal}
    :longdesc: |-
      If the parent unit is currently tagged as belonging to any unit types matching name, those type tags are deleted. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the parent unit) has all matching types deleted. If "-grand" is specified and the parent is a top-level unit, the attribute is ignored. If the designated unit has no matching type names, then this attribute is ignored. It is not possible to delete the primary type assigned to a unit.

      [Multiple] [ABLite]

      Note: This attribute will not touch the primary type assigned to a unit. It will only effect secondary types that are assigned to the unit at run-time. Attempts to delete the primary type of a unit will be ignored. It is perfectly valid to have a unit with no primary type and only secondary types, so you can use the "type" attribute to assign initial types to a unit that can be deleted at run-time with this attribute.

      Warning: Be very careful with the relative evaluation priorities of your options and items when using this attribute, because a type must already be added to a unit in order for it to be deleted. If this attribute is processed before the type is added to the unit, then this attribute will appear to be not working, while the problem is actually a matter of sequencing and timing.
  zfut:
    :shortdesc: output as footnote
    :attr_type: :tweak_attrs
    :attr_id: zfut
    :syntax: zfut:option
    :longdesc: |-
      This attribute specifies that the indicated option should be added to the unit as a footnote entry. This enables facets of items to be output as footnotes, just like options, if desired.

      [Single]
  zhid:
    :shortdesc: tweak hidden by default
    :attr_type: :tweak_attrs
    :attr_id: zhid
    :syntax: zhid
    :longdesc: |-
      The tweak with this attribute is not initially made visible to the user for selection. This attribute has no parameters.

      [Single] [ABLite]

      Example: tweaks which perform automatic cost rebates are processed automatically, so they do not need to be shown and can be hidden with this attribute.

      Example: Tweaks which are only available if another condition is met can be given this attribute and then made visible via the "show" attribute when the proper condition is satisfied.
  zmor:
    :shortdesc: chain to another tweak
    :attr_type: :tweak_attrs
    :attr_id: zmor
    :syntax: zmor:tweak=[free|cost|incl|auto]{#race}{#mode}{#legal}
    :longdesc: |-
      The specified tweak, given by its unique id, is automatically chained into the set of tweaks for the parent item. This newly linked tweak is assigned the link nature indicated, with the standard effects of the tweak being applied.

      [Multiple] [ABLite]

      Warning: There are a number of other attributes that rely upon tweaks not being created and destroyed dynamically at run-time, which is what this attribute does. As a result, you may not experience the desired behavior if you use this attribute in complex situations. If this occurs, try using the "slct" attribute instead.

      Warning: When this attribute is used, new tweaks are synthesized on the fly by Army Builder to allow the user to select the specified unit. Consequently, there is no longer any link to the original tweak that this attribute is defined for. There is no run-time control over the synthesized tweaks, so you cannot make use of attributes like "over", "enab", or "elim" in conjunction with this functionality.
  zovr:
    :shortdesc: override tweak selection
    :attr_type: :tweak_attrs
    :attr_id: zovr
    :syntax: zovr:tweak=[delete|deselect|disable|enable]
    :longdesc: |-
      This attribute effects the specified peer tweak, given by its unique id. The peer tweak must also be a child of the same parent unit as the option that contains this attribute. If the option does not exist, this attribute does nothing. The specified tweak is overridden in one of four ways:
         disable - The tweak is made non-changeable to the user, remaining in its current selection state.
         deselect - The tweak is de-selected and made non-changeable to the user.
         delete - The tweak is de-selected and physically removed from the list of tweaks shown to the user.
         enable - The tweak is made changeable to the user (assuming it was initially disabled).

      [Multiple] [ABLite]

      Example: A unit with the options "normal bow" and "longbow upgrade" will always begin with the "normal bow" option included for free. When the "longbow upgrade" option is selected, the "normal bow" option must be de-selected, since it has been replaced (over:normbow=deselect).
  zprt:
    :shortdesc: adjust parent stat value
    :attr_type: :tweak_attrs
    :attr_id: zprt
    :syntax: zprt:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}{-base}
    :longdesc: |-
      This attribute works identically to the "zsta" attribute, except that it affects the unit that is the parent of the item's parent unit, working upward through the hierarchy by a level. If the '-base' qualifier is specified, then the adjustment is applied to the base value of the stat and not the adjusted value (behaving like the "zbas" attribute instead of the "zsta" attribute). If the parent unit does not have a parent itself, then this attribute has no effect.

      [Multiple] [ABLite]
  zrng:
    :shortdesc: specify selection range
    :attr_type: :tweak_attrs
    :attr_id: zrng
    :syntax: zrng:min-max{-start=start}{[-step=x|-incr=x]}
    :longdesc: |-
      This tweak is not a standard tweak that is either selected or not. Instead, this tweak can be selected multiple times. The valid range that can be specified for the tweak must be given via its minimum (min) and maximum (max) values. Optionally, a starting value (start) can be specified, defaulting to the minimum value if not provided.

      It is also possible to specify an arbitrary adjustment interval for the attribute. Either a "-step" qualifier or an "-incr" qualifier can be used. Both of these qualifiers specify 'x' as the adjustment to increase the tweak value whenever the user clicks the '+' or '-' buttons. However, these qualifiers behave differently from each other in their other effects, so it is important to understand their different usage. The "incr" qualifier is used when you want to increment the selection by 'x' each time, just as if the user had clicked the button x times. For example, using "-incr=4" would increment the tweak by 4 with each click. The cost charged for the tweak will be increased by 4 times the tweak cost, and all other adjustments triggered by the tweak (such as stat adjustments) are applied 4 times for each increment. In contrast, the "step" qualifier provides a visual adjustment of +x, yet the internal effects are only applied once for each click of the '+' or '-' button. For example, using "-step=4" would increase the value shown for the tweak by 4 with each click, but the cost would only be increased a single time, and all other adjustments associated by the tweak (like stat adjustments) would only be applied ONCE for each click. The "step" qualifier is ideal for game systems where equipment is purchased in "lots" of a fixed size, such as ammunition. For example, if the ammo for a weapon were purchased in cases of 12 shots each, at a price of 7 points per case, the "step" qualifier could be used to show the total number of shots purchased, while still keeping the price calculation correct (use "-step=12" with an option cost of 7 points).

      When you use either the "incr" or "step" qualifier, there are some VERY important constraints and possible side-effects to be aware of. First of all, the overall range of values (i.e. from minimum to maximum) MUST be an integral multiplier of the interval specified. If the range is NOT an integral multiplier, it is automatically increased to the next higher multiplier. This means that an attribute of "rang:0-13-step=4" would automatically get modified to become "rang:0-16-step=4", since 16 is the next higher integral multiplier of 4 that is above 13. The same holds true for any "-start" qualifier that is specified. The starting value MUST be a proper value within the range that would normally be selected if the range began at the minimum. If the attribute "rang:0-16-step=4-start=3" were specified, the starting value would automatically be adjusted to a value of 4. If you don't take care to get your values correct, Army Builder will correct them for you. However, automatic correction may not always do exactly what you WANT to have happen, so specify your ranges correctly for yourself.

      When this option is encountered in roster output, the option name will be followed by an indication of the quantity selected (e.g. "Weapon (x3)").

      [Multiple] [ABLite]

      Note: When this attribute is used in conjunction with conflict groups, the current selection count for the tweak is used as the count towards any conflict resolution. For example, if the range is defined as 1-4, then the tweak will count as 1-4 instances towards the maximum allowed for the conflict group. If the conflict group is defined to allow a maximum of 3 instances, then the tweak will be disabled to the user as soon as the count is increased to 3 (i.e. the value of 4 will never be available due to the conflict group limit).

      Warning: Many other tweak attributes will not operate correctly if associated with a tweak that also uses this attribute. In general, this attribute should be used only with basic tweak attributes like stat adjustment, although it can also be used with the "zcst:single" attribute. Use in conjunction with other attributes is not guaranteed to work and may cause unpredictable results.

      Example: Units can possess from 3-10 instances of a tweak (rang:3-10).
  zshw:
    :shortdesc: show specified tweak
    :attr_type: :tweak_attrs
    :attr_id: zshw
    :syntax: zshw:tweak
    :longdesc: |-
      The specified peer tweak, given by its unique id, is made visible to the user (assuming it was hidden). If the tweak does not exist or the option is already visible, then this attribute has no effect.

      [Multiple] [ABLite]
  zspc:
    :shortdesc: allow item category
    :attr_type: :tweak_attrs
    :attr_id: zspc
    :syntax: zspc:[+|-]category{#race}{#mode}{#legal}
    :longdesc: |-
      The specified special item category, given by its abbreviation, is either made available to the parent unit ('+') or expressly forbidden to the parent unit ('-').

      [Multiple] [ABLite]
  zsta:
    :shortdesc: adjust stat value
    :attr_type: :tweak_attrs
    :attr_id: zsta
    :syntax: zsta:name[+|-|=|*|/][value|(expr)]{-[round|roundup|rounddown]}{-[clip|clipup|clipdown]}
    :longdesc: |-
      This attribute modifies the value of the specified stat within the parent unit. The attribute is adjusted in one of five ways, as described below:
         '+' - The stat is increased by the given value
         '-' - The stat is decreased by the given value
         '=' - The stat is set equal to the given value, regardless of its current value
         '*' - The stat is multiplied by the given value
         '/' - The stat is divided by the given value (division by zero yeilds 9999999)
      If an expression is given, it must be enclosed within parentheses. Expression syntax allows up to 4 terms, each of which can specify a literal value, a stat reference, '#' for the model count, or '%' for the item count. If a stat reference is encountered, the current adjusted value for the stat is utilized when the expression is evaluated. The operators supported are '+', '-', '*', '/', '^', and '@'. Optional rounding and clipping can be performed upon the stat as part of the adjustment.

      [Multiple] [ABLite]

      Note: Expressions are evaluated on a purely left-to-right basis, with standard operator precedence NOT being observed. This means that the expression "2+3*4" will result in a value of 20 instead of the standard 14, since it will be evaluated as "(2+3)*4".Example: Option A increases the number of Attacks by 1 (zsta:At+1).

      Example: Option B decreases the Save by 1 (zsta:Sv-1).

      Example: A complex expression to adjust a stat might look like "zsta:sp-(mv+cc/at+1)"
  zstx:
    :shortdesc: modify text stat value
    :attr_type: :tweak_attrs
    :attr_id: zstx
    :syntax: zstx:name[+|=|<]"value"
    :longdesc: |-
      The stat value with the given name is appended with ('+'), prepended with ('<'), or replaced by ('=') the text value given within double-quotes.

      [Multiple]

      Example: The damage of a special weapon increases normal damage by "1D6" (zstx:dam+"1D6").
  ztbl:
    :shortdesc: table-based set of tweaks
    :attr_type: :tweak_attrs
    :attr_id: ztbl
    :syntax: ztbl:value0=option0{,value1=option1{...}}
    :longdesc: |-
      The tweak with this attribute is special. The tweak is treated as a table of valid settings, with each possible setting being selectable by the user. The primary use for this attribute is to model a tweak whose value can span a range of values, yet the tweak has varying effects at each value and/or has a varying cost for each value. The presentation of these settings is done similarly to the "rang" attribute, where a '+' and '-' button are shown at the left edge of the tweak, with the value for the setting and the tweak name shown to the right.

      Each entry in the table is defined as an abbreviation that is shown to the user and a tweak that is triggered for the parent unit when the table entry is selected by the user. Syntactically, each table entry in the list is separated by a comma, with each entry consisting of two components: the value that is displayed and the option that is chained to as the effects of the selection. The value can be up to 20 alphanumeric characters in length, while the tweak is specified by its unique id. The link nature of the chained tweak is always "cost". This allows all of the selection and cost handling to be dealt with entirely within the chained tweak. It also allows a chained tweak to be used separately for other purposes if desired. The actual cost of the table-based tweak is determined by which table entry is selected. The cost of the tweak is computed as the normal cost of the tweak that is currently chained to (which is selected by the user).

      The display of the table to the user within the Options Panel can be controlled in a few ways. Normally, the table name is displayed and the name of the currently selected table entry is shown to the left with angled brackets around it. Specifying the "-noname" qualifier suppresses the display of the table option name, leaving only the name of the currently selected entry. Specifying the "-nobrackets" qualifier suppresses the angle brackets around the selected entry name.

      [Single] [ABLite]

      Note: The maximum number of entries that can be defined for a given table is 50.

      Note: There is no "unselected" state for a tweak with this attribute. If this attribute is active (i.e. it can be disabled via the normal mechanisms), then the "unselected" state of the tweak is as if the first entry in the table is selected. If you want there to be an "unselected" state for the tweak, then you must include an initial table entry which chain to a tweak that does nothing.

      Note: The chained tweaks for a table are handled specially, so they are NOT processed during normal conflict resolution. As such, any table-based options which chain to tweaks that would normally conflict with other tweaks will not conflict. The use of the "tabl" attribute is primarily designed for the adjustment of stats and attributes of the unit, where conflicts are not usually a factor.

      Note: It is valid to utilize attributes like "over" and "enab" within the chained tweaks of a table. Their behavior will be normal when the particular table entry is selected. However, it is not possible to use these attributes within normal tweaks of an item to override other tweaks that are actually chained to from within a table.

      Note: Table-based tweaks as a whole can be deleted and enabled via other tweaks using the standard attributes for this purpose. When this occurs, the entire table is either active or not. Disabling a table merely disables the ability to change the current selection within the table. As with normal options, the current selection within the table is still active and its effects are applied normally. Deleting the table-based tweak results in the table being completely suppressed.

      Warning: When the "tabl" attribute is used, the only attributes which may be used in conjunction with it on the same tweak are: "zusz", "zutp", and "legl". If any other attributes are used with "tabl", the results are undefined and you will likely get incorrect results (and, in extreme conditions, possibly a program crash).
  ztyp:
    :shortdesc: assign unit type
    :attr_type: :tweak_attrs
    :attr_id: ztyp
    :syntax: ztyp:name{-[grand|child]}{-nodups}{#race}{#mode}{#legal}
    :longdesc: |-
      The parent unit is tagged as belonging to the unit type given by name, in addition to any other type names that the unit has already been assigned. If the "-grand" qualifier is specified, then the grandparent unit (i.e. the parent of the unit) is assigned the type. If "-grand" is specified and this is a top-level unit, the attribute is ignored. If the "-child" qualifier is used, all child units are assigned the type, but not the current unit. If the "-nodups" qualifier is specified, the new type will not be assigned to the unit if that type already is assigned one or more times. A maximum of 40 extra type names can be assigned to any one regiment at a time, with additional types being simply ignored.

      [Multiple] [ABLite]

      Note: Use of the "-nodups" qualifier may conflict with the use of other functionality within Army Builder, such as the "cost" attribute with the "typecount" form. Use this qualifier judiciously.
  zunm:
    :shortdesc: modify unit name
    :attr_type: :tweak_attrs
    :attr_id: zunm
    :syntax: zunm:[+|=|<]"text"
    :longdesc: |-
      The name of the unit is modified by this attribute. Either the unit name has the specified text appended ('+'), prepended ('<'), or replaced ('=') with the new text. The text must be placed within double quotes to allow spaces to be embedded.

      [Multiple] [ABLite]

      Example: The tweak appends the text " (Aligned)" to the unit (zunm:+" (Aligned)").
  zusz:
    :shortdesc: restricted by unit size
    :attr_type: :tweak_attrs
    :attr_id: zusz
    :syntax: zusz:[min|max]=size{-eff}
    :longdesc: |-
      The number of models in the parent unit must be either at least (min) or at most (max) the specified size in order for this tweak to be valid for the item. If the unit size is modified to be non-compliant with the specified range, the tweak is automatically deselected and hidden from view. By default, the unit size is the number of models within the parent regiment only, excluding any children. However, by specifying the "-eff" qualifier, the size will include all children who possess the "coun" attribute, thereby using the effective unit size.

      [Multiple] [ABLite]

      Example: In order for Unit A to be given a Champion model, it must consist of at least 2 normal models (zusz:min=2).
  zutp:
    :shortdesc: only show for unit type
    :attr_type: :tweak_attrs
    :attr_id: zutp
    :syntax: zutp:expr
    :longdesc: |-
      The tweak with this attribute is restricted to only be shown for units satisfying the boolean expression. The expression can contain multiple type names, combined by boolean operators. The operators AND ('&'), OR ('|'), XOR ('^'), and NOT ('!') can be used, as well as parentheses. Each type value can contain wildcards. All type names assigned to the unit are included when evaluating the expression. However, only types that are assigned to the unit via special items will be considered valid.

      [Multiple] [ABLite]

      Example: A complex comparison expression might look like "zutp:!(for^bar)&zap"
